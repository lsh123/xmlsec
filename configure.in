dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.2)
AC_INIT(src/xmlsec.c)
AM_CONFIG_HEADER(config.h)
AC_CANONICAL_HOST


XMLSEC_PACKAGE=xmlsec1
XMLSEC_VERSION_MAJOR=1
XMLSEC_VERSION_MINOR=1
XMLSEC_VERSION_SUBMINOR=2
XMLSEC_VERSION="$XMLSEC_VERSION_MAJOR.$XMLSEC_VERSION_MINOR.$XMLSEC_VERSION_SUBMINOR"
XMLSEC_VERSION_INFO=`echo $XMLSEC_VERSION | awk -F. '{ printf "%d:%d:%d", $1+$2, $3, $2 }'`
XMLSEC_VERSION_SAFE=`echo $XMLSEC_VERSION | sed 's/\./_/g'`

PACKAGE=$XMLSEC_PACKAGE
VERSION=$XMLSEC_VERSION

AC_SUBST(XMLSEC_VERSION)
AC_SUBST(XMLSEC_PACKAGE)
AC_SUBST(XMLSEC_VERSION_SAFE)
AC_SUBST(XMLSEC_VERSION_MAJOR)
AC_SUBST(XMLSEC_VERSION_MINOR)
AC_SUBST(XMLSEC_VERSION_SUBMINOR)
AC_SUBST(XMLSEC_VERSION_INFO)

AM_INIT_AUTOMAKE($PACKAGE, $VERSION, no-define)
AM_MAINTAINER_MODE

dnl
dnl Check the environment
dnl
AC_PROG_CC
AC_PROG_LIBTOOL
AC_PROG_INSTALL
AC_ARG_PROGRAM
AC_STDC_HEADERS
AC_PATH_PROG(RM, rm, /bin/rm)
AC_PATH_PROG(MV, mv, /bin/mv)
AC_PATH_PROG(TAR, tar, /bin/tar)

dnl Make sure we have an ANSI compiler
AM_C_PROTOTYPES
test "z$U" != "z" && AC_MSG_ERROR(Compiler not ANSI compliant)

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_CHECK_HEADERS([stdio.h])
AC_CHECK_HEADERS([stdlib.h])
AC_CHECK_HEADERS([string.h])
AC_CHECK_HEADERS([ctype.h])
AC_CHECK_HEADERS([errno.h])
AC_CHECK_HEADERS([ansidecl.h])
AC_CHECK_HEADERS([time.h])
AC_CHECK_FUNCS(printf sprintf fprintf snprintf vfprintf vsprintf vsnprintf sscanf timegm)

AC_LIB_LTDL

XMLSEC_DEFINES=""

dnl ==========================================================================
dnl Specific setup for Aleksey's development environment: 
dnl	- with xkms support (while in development)
dnl	- with debug
dnl 	- with pedantic compiler flags
dnl	- with static binaries
dnl ==========================================================================
AC_MSG_CHECKING(for development environment) 
AC_ARG_ENABLE(development,   [  --enable-development    enable development environment (no)])
if test "z$enable_development" = "zyes" -o "z${LOGNAME}" = "zaleksey" ; then
    enable_xkms="yes"
    enable_debuging="yes"
    enable_pedantic="yes"
#    enable_static_linking="yes"
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi    


dnl ==========================================================================
dnl Perform host specific configuration
dnl ==========================================================================
case "${host}" in
    *aix* )
	CFLAGS="${CFLAGS} -D_ALL_SOURCE"
	;;
esac

dnl ==========================================================================
dnl Check for __FUNCTION__ or __FUNCTION__
dnl ==========================================================================
AC_MSG_CHECKING(for __FUNCTION__ or __func__)
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([],
	[[char *foo = __FUNCTION__;]])],
	[ac_function_exists=yes],
	[ac_function_exists=no])
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([],
	[[char *foo = __func__;]])],
	[ac_func_exists=yes],
	[ac_func_exists=no])
if test "z$ac_function_exists" = "zyes" ; then
	AC_MSG_RESULT(__FUNCTION__)
	XMLSEC_DEFINES="$XMLSEC_DEFINES -D__XMLSEC_FUNCTION__=__FUNCTION__"
elif test "z$ac_func_exists" = "zyes" ; then 
	AC_MSG_RESULT(__func__)
	XMLSEC_DEFINES="$XMLSEC_DEFINES -D__XMLSEC_FUNCTION__=__func__"
else 
	AC_MSG_RESULT("no")
fi

dnl ==========================================================================
dnl check do we have size_t and its size, 
dnl TODO: will need to replace this and the xmlSecSize define with 
dnl typedef on next ABI refresh
dnl ==========================================================================
AC_CHECK_SIZEOF(size_t)
if test "$ac_cv_sizeof_size_t" -ne "4" ; then
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_SIZE_T"
fi

dnl ==========================================================================
dnl find libxml
dnl ==========================================================================
XMLSEC_NO_LIBXML="1"
LIBXML_MIN_VERSION=2.4.24
LIBXML_CONFIG="xml2-config"
LIBXML_PREFIX=""
LIBXML_CFLAG=""
LIBXML_LIBS=""
AC_MSG_CHECKING(for libxml2 libraries >= $LIBXML_MIN_VERSION) 
AC_ARG_WITH(libxml, [  --with-libxml=[PFX]       libxml2 location])
if test "z$with_libxml" = "zno" ; then 
    AC_MSG_ERROR(libxml2 is required for $PACKAGE)
else
    if test "z$with_libxml" != "z" ; then
	LIBXML_PREFIX=$with_libxml
	LIBXML_CONFIG=$LIBXML_PREFIX/bin/$LIBXML_CONFIG
    fi

    if ! $LIBXML_CONFIG --version > /dev/null 2>&1 ; then
	AC_MSG_ERROR(Could not find libxml2 anywhere (see config.log for details).)
    fi
    vers=`$LIBXML_CONFIG --version | awk -F. '{ printf "%d", ($1 * 1000 + $2) * 1000 + $3;}'`
    minvers=`echo $LIBXML_MIN_VERSION | awk -F. '{ printf "%d", ($1 * 1000 + $2) * 1000 + $3;}'`
    if test "$vers" -ge "$minvers" ; then
        LIBXML_LIBS="`$LIBXML_CONFIG --libs`"
        LIBXML_CFLAGS="`$LIBXML_CONFIG --cflags`"
	LIBXML_VERSION="`$LIBXML_CONFIG --version`"
	XMLSEC_NO_LIBXML="0"
        AC_MSG_RESULT(yes ('$LIBXML_VERSION'))
    else
        AC_MSG_ERROR(You need at least libxml2 $LIBXML_MIN_VERSION for this version of $PACKAGE)
    fi
fi
AM_CONDITIONAL(XMLSEC_NO_LIBXML, test "z$XMLSEC_NO_LIBXML" == "z1")
AC_SUBST(XMLSEC_NO_LIBXML)
AC_SUBST(LIBXML_MIN_VERSION)
AC_SUBST(LIBXML_CONFIG)	
AC_SUBST(LIBXML_PREFIX)
AC_SUBST(LIBXML_CFLAGS)
AC_SUBST(LIBXML_LIBS)

dnl ==========================================================================
dnl find libxslt
dnl ==========================================================================
XMLSEC_NO_LIBXSLT="1"
LIBXSLT_MIN_VERSION=1.0.20
LIBXSLT_CONFIG="xslt-config"
LIBXSLT_PREFIX=""
LIBXSLT_CFLAGS=""
LIBXSLT_LIBS=""
AC_MSG_CHECKING(for libxslt libraries >= $LIBXSLT_MIN_VERSION) 
AC_ARG_WITH(libxslt, [  --with-libxslt=[PFX]      libxslt location])
if test "z$with_libxslt" = "zno" ; then
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_XSLT=1"
    AC_MSG_RESULT(no)
else
    if test "z$with_libxslt" != "z" ; then
	LIBXSLT_PREFIX=$with_libxslt
	LIBXSLT_CONFIG=$LIBXSLT_PREFIX/bin/$LIBXSLT_CONFIG
    fi
    if ! $LIBXSLT_CONFIG --version > /dev/null 2>&1 ; then
	if test "z$with_libxslt" != "z" ; then
	    AC_MSG_ERROR(Unable to find libxslt at '$with_libxslt')
	else 
	    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_XSLT=1"
	    AC_MSG_RESULT(no)
	fi
    else
        vers=`$LIBXSLT_CONFIG --version | awk -F. '{ printf "%d", ($1 * 1000 + $2) * 1000 + $3;}'`
	minvers=`echo $LIBXSLT_MIN_VERSION | awk -F. '{ printf "%d", ($1 * 1000 + $2) * 1000 + $3;}'`
	if test "$vers" -ge "$minvers" ; then
    	    LIBXSLT_LIBS="`$LIBXSLT_CONFIG --libs`"
	    LIBXSLT_CFLAGS="`$LIBXSLT_CONFIG --cflags`"
	    LIBXSLT_VERSION="`$LIBXSLT_CONFIG --version`"
	    XMLSEC_NO_LIBXSLT="0"
    	    AC_MSG_RESULT(yes ('$LIBXSLT_VERSION'))
	else
    	    AC_MSG_ERROR(You need at least libxslt $LIBXSLT_MIN_VERSION for this version of $PACKAGE)
	fi	
    fi
fi
AC_SUBST(XMLSEC_NO_LIBXSLT)
AC_SUBST(LIBXSLT_MIN_VERSION)
AC_SUBST(LIBXSLT_PREFIX)
AC_SUBST(LIBXSLT_CONFIG)	
AC_SUBST(LIBXSLT_CFLAGS)
AC_SUBST(LIBXSLT_LIBS)

dnl ==========================================================================
dnl See if we can find a crypto library
dnl ==========================================================================
XMLSEC_CRYPTO=""
XMLSEC_CRYPTO_LIST=""
XMLSEC_CRYPTO_DISABLED_LIST=""
XMLSEC_CRYPTO_LIB=""
XMLSEC_CRYPTO_CFLAGS=""
XMLSEC_CRYPTO_CFLAGS_APP=""
XMLSEC_CRYPTO_LIBS=""
XMLSEC_CRYPTO_LDADDS=""

dnl ==========================================================================
dnl OpenSSL
dnl ==========================================================================
ac_openssl_lib_dir="/usr/local/lib /usr/lib /usr/local /usr/local/ssl /usr/local/ssl/lib /usr/pkg"
ac_openssl_inc_dir="/usr/local/include /usr/include /usr/local /usr/local/ssl /usr/pkg /usr/local/ssl/include"

XMLSEC_NO_OPENSSL="1"
OPENSSL_MIN_VERSION="0.9.6"
OPENSSL_VERSION=""
OPENSSL_PREFIX=""
OPENSSL_CFLAGS="-DXMLSEC_CRYPTO_OPENSSL=1"
OPENSSL_LIBS=""
OPENSSL_LDADDS=""
OPENSSL_CRYPTO_LIB="$PACKAGE-openssl"
AC_MSG_CHECKING(for openssl libraries >= $OPENSSL_MIN_VERSION) 
AC_ARG_WITH(openssl, [  --with-openssl=[PFX]      openssl location])
if test "z$with_openssl" = "zno" ; then
    XMLSEC_CRYPTO_DISABLED_LIST="$XMLSEC_CRYPTO_DISABLED_LIST openssl"
    AC_MSG_RESULT(no)
else
    if test "z$with_openssl" != "z" ; then
	OPENSSL_PREFIX=$with_openssl
	OPENSSL_CFLAGS="$OPENSSL_CFLAGS -I$OPENSSL_PREFIX/include"
	OPENSSL_LIBS="-L$OPENSSL_PREFIX/lib -lcrypto"
	OPENSSL_LDADDS="$OPENSSL_PREFIX/lib/libcrypto.a"
	OPENSSL_INCLUDES_FOUND="yes"
	OPENSSL_LIBS_FOUND="yes"
    else
	OPENSSL_INCLUDES_FOUND="no"
	OPENSSL_LIBS_FOUND="no"
	for dir in $ac_openssl_inc_dir ; do
	    if test -f $dir/openssl/ssl.h ; then
		dnl do not add -I/usr/include because compiler does it anyway
		if test "z$dir" = "z/usr/include" ; then
		    OPENSSL_CFLAGS="$OPENSSL_CFLAGS "
		else
		    OPENSSL_CFLAGS="$OPENSSL_CFLAGS -I$dir"
		fi
		OPENSSL_INCLUDES_FOUND="yes"
		break
	    fi
	done

	for dir in $ac_openssl_lib_dir ; do
	    if test -f $dir/libcrypto.a ; then
		dnl do not add -L/usr/lib because compiler does it anyway
		if test "z$dir" = "z/usr/lib" ; then
		    OPENSSL_LIBS="-lcrypto"
		else
		    OPENSSL_LIBS="-L$dir -lcrypto"
		fi
		OPENSSL_LIBS_FOUND="yes"
		OPENSSL_LDADDS="$dir/libcrypto.a"
		ac_found_openssl_lib_dir=$dir
		break;
	    fi
	done
    fi
    
    if test "z$OPENSSL_INCLUDES_FOUND" = "zyes" -a "z$OPENSSL_LIBS_FOUND" = "zyes" ; then
	dnl Check the OpenSSL version    
	OLD_CPPFLAGS=$CPPFLAGS
	CPPFLAGS="$OPENSSL_CFLAGS"
	AC_EGREP_CPP(yes,[
	    #include <openssl/opensslv.h>
	    #if OPENSSL_VERSION_NUMBER >= 0x00906000L
		yes
	    #endif
	],[
	    OPENSSL_VERSION="0.9.6"
	],[
    	    AC_MSG_ERROR(You need at least OpenSSL 0.9.6 for this version of $PACKAGE)
	]) 
	AC_EGREP_CPP(yes,[
	    #include <openssl/opensslv.h>
	    #if OPENSSL_VERSION_NUMBER >= 0x00907000L
		yes
	    #endif
	],[
	    OPENSSL_VERSION="0.9.7"
	],[
	    OPENSSL_VERSION="0.9.6"
	    OPENSSL_CFLAGS="$OPENSSL_CFLAGS -DXMLSEC_OPENSSL_096=1"
	])    
	CPPFLAGS=$OLD_CPPFLAGS
	XMLSEC_NO_OPENSSL="0"
	
	dnl first crypto library is default one
	if test "z$XMLSEC_CRYPTO" = "z" ; then
	    XMLSEC_CRYPTO="openssl"
    	    XMLSEC_CRYPTO_LIB="$OPENSSL_CRYPTO_LIB"
	    XMLSEC_CRYPTO_CFLAGS="$OPENSSL_CFLAGS"
	    XMLSEC_CRYPTO_LIBS="$OPENSSL_LIBS"
	    XMLSEC_CRYPTO_LDADDS="$OPENSSL_LDADDS"
	fi	
	XMLSEC_CRYPTO_LIST="$XMLSEC_CRYPTO_LIST openssl"
        AC_MSG_RESULT(yes ('$OPENSSL_VERSION'))
    else
	XMLSEC_CRYPTO_DISABLED_LIST="$XMLSEC_CRYPTO_DISABLED_LIST openssl"
        AC_MSG_RESULT(no)
    fi
fi
AM_CONDITIONAL(XMLSEC_NO_OPENSSL, test "z$XMLSEC_NO_OPENSSL" == "z1")
AC_SUBST(XMLSEC_NO_OPENSSL)
AC_SUBST(OPENSSL_MIN_VERSION)
AC_SUBST(OPENSSL_VERSION)
AC_SUBST(OPENSSL_CONFIG)	
AC_SUBST(OPENSSL_PREFIX)
AC_SUBST(OPENSSL_CFLAGS)
AC_SUBST(OPENSSL_LIBS)
AC_SUBST(OPENSSL_LDADDS)
AC_SUBST(OPENSSL_CRYPTO_LIB)

dnl ==========================================================================
dnl See if we can find GnuTLS
dnl ==========================================================================
GNUTLS_CONFIG="libgnutls-config"
XMLSEC_NO_GNUTLS="1"
GNUTLS_MIN_VERSION="0.8.1"
GNUTLS_VERSION=""
GNUTLS_PREFIX=""
GNUTLS_CFLAGS="-DXMLSEC_CRYPTO_GNUTLS=1"
GNUTLS_LIBS=""
GNUTLS_LDADDS=""
GNUTLS_CRYPTO_LIB="$PACKAGE-gnutls"

AC_MSG_CHECKING(for gnutls libraries >= $GNUTLS_MIN_VERSION) 
AC_ARG_WITH(gnutls, [  --with-gnutls=[PFX]       gnutls location])
if test "z$with_gnutls" = "zno" ; then
    XMLSEC_CRYPTO_DISABLED_LIST="$XMLSEC_CRYPTO_DISABLED_LIST gnutls"
    AC_MSG_RESULT(no)
else
    if test "z$with_gnutls" != "z" ; then
	GNUTLS_PREFIX=$with_gnutls
	GNUTLS_CONFIG=$GNUTLS_PREFIX/bin/$GNUTLS_CONFIG
    fi
    if ! $GNUTLS_CONFIG --version > /dev/null 2>&1 ; then
	if test "z$with_gnutls" != "z" ; then
	    AC_MSG_ERROR(Unable to find gnutls at '$with_gnutls')
	fi
    else
        vers=`$GNUTLS_CONFIG --version | awk -F. '{ printf "%d", ($1 * 1000 + $2) * 1000 + $3;}'`
	minvers=`echo $GNUTLS_MIN_VERSION | awk -F. '{ printf "%d", ($1 * 1000 + $2) * 1000 + $3;}'`
	if test "$vers" -ge "$minvers" ; then
	    GNUTLS_CFLAGS="$GNUTLS_CFLAGS `$GNUTLS_CONFIG --cflags`"
    	    GNUTLS_LIBS="$GNUTLS_LIBS `$GNUTLS_CONFIG --libs`"
	    GNUTLS_VERSION="`$GNUTLS_CONFIG --version`"
	    XMLSEC_NO_GNUTLS="0"
	else
    	    AC_MSG_ERROR(You need at least gnutls $GNUTLS_MIN_VERSION for this version of $PACKAGE)
	fi	
    fi

    dnl update crypt libraries list
    if test "z$XMLSEC_NO_GNUTLS" != "z1" ; then
	dnl first crypto library is default one
	if test "z$XMLSEC_CRYPTO" = "z" ; then
	    XMLSEC_CRYPTO="gnutls"
    	    XMLSEC_CRYPTO_LIB="$GNUTLS_CRYPTO_LIB"
	    XMLSEC_CRYPTO_CFLAGS="$GNUTLS_CFLAGS"
	    XMLSEC_CRYPTO_LIBS="$GNUTLS_LIBS"
	    XMLSEC_CRYPTO_LDADDS="$GNUTLS_LDADDS"
	fi	
	XMLSEC_CRYPTO_LIST="$XMLSEC_CRYPTO_LIST gnutls"
    	AC_MSG_RESULT(yes ('$GNUTLS_VERSION'))
    else
	XMLSEC_CRYPTO_DISABLED_LIST="$XMLSEC_CRYPTO_DISABLED_LIST gnutls"
	AC_MSG_RESULT(no)
    fi
fi
AM_CONDITIONAL(XMLSEC_NO_GNUTLS, test "z$XMLSEC_NO_GNUTLS" = "z1")
AC_SUBST(XMLSEC_NO_GNUTLS)
AC_SUBST(GNUTLS_MIN_VERSION)
AC_SUBST(GNUTLS_VERSION)
AC_SUBST(GNUTLS_CONFIG)	
AC_SUBST(GNUTLS_PREFIX)
AC_SUBST(GNUTLS_CFLAGS)
AC_SUBST(GNUTLS_LIBS)
AC_SUBST(GNUTLS_LDADDS)
AC_SUBST(GNUTLS_CRYPTO_LIB)

dnl ==========================================================================
dnl See if we can find NSS and NSPR
dnl Allow the use of:
dnl   1.  Mozilla style distribution where all mozilla components (NSS, NSPR
dnl       are just 2 of over 100 components) are under one directory.
dnl       options: [--with-mozilla-ver=<VERSION>]
dnl
dnl       Using the version number, various directories are searched
dnl       for NSS & NSPR
dnl
dnl                      AND / OR
dnl
dnl   2.  separate NSS & NSPR distributions
dnl       options: [--with-nss=<PFX>] [--with-nspr=<PFX>]
dnl   
dnl   2 overrides 1
dnl
dnl ==========================================================================
    
XMLSEC_NO_NSS="1"
NSS_MIN_VERSION="3.2"
MOZILLA_MIN_VERSION="1.4"
NSS_VERSION=""
NSS_CFLAGS="-DXMLSEC_CRYPTO_NSS=1"
NSS_LIBS=""
NSS_LDADDS=""
NSS_PREFIX=""
NSPR_PREFIX=""
NSS_LIBS_LIST="-lnss3 -lsmime3"
NSPR_LIBS_LIST="-lnspr4 -lplds4 -lplc4"
NSS_CRYPTO_LIB="$PACKAGE-nss"

dnl if nss is disabled, bail out early
AC_ARG_WITH(nss, [  --with-nss=[PFX]          nss location])
AC_ARG_WITH(nspr, [  --with-nspr=[PFX]         nspr location (needed for NSS)])
AC_ARG_WITH(mozilla, [  --with-mozilla-ver=[VER]  mozilla version (alt to --with-nss, --with-nspr)])
if test "z$with_nss" = "zno" ; then
    XMLSEC_CRYPTO_DISABLED_LIST="$XMLSEC_CRYPTO_DISABLED_LIST nss"
else
    MOZILLA_VERSION="1.4"
    NSPR_MIN_VERSION="4.0"
    NSPR_INCLUDES_FOUND="no"
    NSPR_LIBS_FOUND="no"
    NSS_EXPLICIT="no"
    NSPR_EXPLICIT="no"
    NSPR_PRINIT_H=""
    NSS_NSS_H=""

    dnl process the mozilla options if any
    if test "z$with_mozilla_version" != "z" ; then
        MOZILLA_VERSION=$with_mozilla_version
    fi

    ac_mozilla_name=mozilla-$MOZILLA_VERSION
    ac_nss_lib_dir="/usr/lib /usr/local/lib /usr/lib/$ac_mozilla_name /usr/local/lib/$ac_mozilla_name"
    ac_nss_inc_dir="/usr/include /usr/include/mozilla /usr/local/include /usr/local/include/mozilla /usr/include/$ac_mozilla_name /usr/local/include/$ac_mozilla_name"

    dnl now look for nspr
    AC_MSG_CHECKING(for nspr libraries >= $NSPR_MIN_VERSION)

    if test "z$with_nspr" = "zno" ; then
      AC_MSG_RESULT(no)
    else  
      if test "z$with_nspr" != "z" ; then
         NSPR_PREFIX="$with_nspr"
         NSPR_CFLAGS="-I$with_nspr/include"
         if test "z$with_gnu_ld" = "zyes" ; then
           NSPR_LIBS="-Wl,-rpath-link -Wl,$with_nspr/lib -L$with_nspr/lib $NSPR_LIBS_LIST"
         else
           NSPR_LIBS="-L$with_nspr/lib $NSPR_LIBS_LIST"
         fi
         NSPR_LDADDS="-L$with_nspr/lib $NSPR_LIBS_LIST"
         NSPR_INCLUDES_FOUND="yes"
         NSPR_LIBS_FOUND="yes"
         NSPR_EXPLICIT="yes"
         NSPR_PRINIT_H="$with_nspr/include/prinit.h"
      else
         for dir in $ac_nss_inc_dir ; do
            if test -f $dir/nspr/prinit.h ; then
               dnl do not add -I/usr/include because compiler does it anyway
               if test "z$dir" = "z/usr/include" ; then
                  NSPR_CFLAGS=""
               else
                  NSPR_CFLAGS="-I$dir/nspr"
               fi
               NSPR_INCLUDES_FOUND="yes"
               NSPR_PRINIT_H="$dir/nspr/prinit.h"
               break
            fi
         done

         for dir in $ac_nss_lib_dir ; do
            if test -f $dir/libnspr4.so ; then
               dnl do not add -L/usr/lib because compiler does it anyway
               if test "z$dir" = "z/usr/lib" ; then
                  NSPR_LIBS="$NSPR_LIBS_LIST"
               else
                  if test "z$with_gnu_ld" = "zyes" ; then
                     NSPR_LIBS="-Wl,-rpath-link -Wl,$dir -L$dir $NSPR_LIBS_LIST"
                  else
                     NSPR_LIBS="-L$dir $NSPR_LIBS_LIST"
                  fi
               fi
               NSPR_LIBS_FOUND="yes"
               break
            fi
         done
      fi

      if test "z$NSPR_INCLUDES_FOUND" = "zyes" -a "z$NSPR_LIBS_FOUND" = "zyes" ; then
         NSPR_VERSION=`cat $NSPR_PRINIT_H | grep PR_VERSION | grep '#define' | awk -F' ' '{printf "%s", $3}' | sed -e 's/"//g'`
         OLD_CPPFLAGS=$CPPFLAGS
         CPPFLAGS="$NSPR_CFLAGS"
         AC_EGREP_CPP(yes,[
            #include <prinit.h>
            #if PR_VMAJOR >= 4
               yes
            #endif
          ],[
    	    AC_MSG_RESULT(yes ('$NSPR_VERSION'))
          ],[
            NSPR_INCLUDES_FOUND="no"
            AC_MSG_RESULT(no)
            ]) 
         CPPFLAGS="$OLD_CPPFLAGS"
      else
         AC_MSG_RESULT(no)
      fi

    fi

    dnl look for nss
    AC_MSG_CHECKING(for nss libraries >= $NSS_MIN_VERSION)

    if test "z$with_nss" != "z" ; then
       NSS_PREFIX="$with_nss"
       NSS_CFLAGS="$NSS_CFLAGS -I$with_nss/include"
       if test "z$with_gnu_ld" = "zyes" ; then
          NSS_LIBS="$NSS_LIBS -Wl,-rpath-link -Wl,$with_nss/lib -L$with_nss/lib $NSS_LIBS_LIST"
       else
          NSS_LIBS="$NSS_LIBS -L$with_nss/lib $NSS_LIBS_LIST"
       fi
       NSS_LDADDS="-L$with_nss/lib $NSS_LIBS_LIST"
       NSS_INCLUDES_FOUND="yes"
       NSS_LIBS_FOUND="yes"
       NSS_EXPLICIT="yes"
       NSS_NSS_H="$with_nss/include/nss.h"
    else
       for dir in $ac_nss_inc_dir ; do
          if test -f $dir/nss/nss.h ; then
             dnl do not add -I/usr/include because compiler does it anyway
             if test "z$dir" = "z/usr/include" ; then
                NSS_CFLAGS="$NSS_CFLAGS"
             else
                NSS_CFLAGS="$NSS_CFLAGS -I$dir/nss"
             fi
             NSS_INCLUDES_FOUND="yes"
             NSS_NSS_H="$dir/nss/nss.h"
             break
          fi
       done
       for dir in $ac_nss_lib_dir ; do
          if test -f $dir/libnss3.so ; then
             dnl do not add -L/usr/lib because compiler does it anyway
             if test "z$dir" = "z/usr/lib" ; then
                NSS_LIBS="$NSS_LIBS_LIST"
             else
                if test "z$with_gnu_ld" = "zyes" ; then
                   NSS_LIBS="-Wl,-rpath-link -Wl,$dir -L$dir $NSS_LIBS_LIST"
                else
                   NSS_LIBS="-L$dir $NSS_LIBS_LIST"
                fi
             fi
             NSS_LIBS_FOUND="yes"
             break
          fi
       done
    fi

    if test "z$NSS_INCLUDES_FOUND" = "zyes" -a "z$NSS_LIBS_FOUND" = "zyes" ; then
       NSS_VERSION=`cat $NSS_NSS_H | grep NSS_VERSION | grep '#define' | awk -F' ' '{printf "%s", $3}' | sed -e 's/"//g'`       
       OLD_CPPFLAGS=$CPPFLAGS
       CPPFLAGS="$NSS_CFLAGS"
       AC_EGREP_CPP(yes,[
          #include <nss.h>
          #if NSS_VMAJOR >= 3 && NSS_VMINOR >= 2
             yes
          #endif
        ],[
	  XMLSEC_NO_NSS="0"
    	  AC_MSG_RESULT(yes ('$NSS_VERSION'))
        ],[
          NSS_INCLUDES_FOUND="no"
          AC_MSG_RESULT(no)
          ]) 
       CPPFLAGS="$OLD_CPPFLAGS"
    else
       AC_MSG_RESULT(no)
    fi

    if test "z$NSPR_INCLUDES_FOUND" != "zyes" -o "$NSPR_LIBS_FOUND" != "zyes" ; then
       if test "z$NSPR_EXPLICIT" = "zyes" ; then 
          AC_MSG_ERROR(You need atleast version 4.0 of NSPR as a pre-requisite for NSS in this version of $PACKAGE)
       fi
    fi 
    
    if test "z$NSS_INCLUDES_FOUND" != "zyes" -o "z$NSS_LIBS_FOUND" != "zyes" ; then
       if test "z$NSS_EXPLICIT" = "zyes" ; then 
         AC_MSG_ERROR(You need atleast version 3.2 of NSS for this version of $PACKAGE)
       fi
    fi 
    
    if test "z$XMLSEC_NO_NSS" != "z1" ; then
       NSS_CFLAGS="$NSS_CFLAGS $NSPR_CFLAGS"
       NSS_LIBS="$NSS_LIBS $NSPR_LIBS"
       NSS_LDADDS="$NSS_LDADDS $NSPR_LDADDS"
       
       dnl first crypto library is default one
       if test "z$XMLSEC_CRYPTO" = "z" ;  then
         XMLSEC_CRYPTO="nss"
         XMLSEC_CRYPTO_LIB="$NSS_CRYPTO_LIB"
         XMLSEC_CRYPTO_CFLAGS="$NSS_CFLAGS"
         XMLSEC_CRYPTO_LIBS="$NSS_LIBS"
         XMLSEC_CRYPTO_LDADDS="$NSS_LDADDS"
       fi
       XMLSEC_CRYPTO_LIST="$XMLSEC_CRYPTO_LIST nss"
    else
       XMLSEC_CRYPTO_DISABLED_LIST="$XMLSEC_CRYPTO_DISABLED_LIST nss"
    fi
fi
AM_CONDITIONAL(XMLSEC_NO_NSS, test "z$XMLSEC_NO_NSS" = "z1")
AC_SUBST(XMLSEC_NO_NSS)
AC_SUBST(NSS_MIN_VERSION)
AC_SUBST(MOZILLA_MIN_VERSION)
AC_SUBST(NSS_VERSION)
AC_SUBST(NSS_CFLAGS)
AC_SUBST(NSS_LIBS)
AC_SUBST(NSS_LDADDS)
AC_SUBST(NSS_LIBS_LIST)
AC_SUBST(NSPR_LIBS_LIST)
AC_SUBST(NSS_PREFIX)
AC_SUBST(NSPR_PREFIX)
AC_SUBST(NSS_CRYPTO_LIB)

dnl ==========================================================================
dnl Do we have a crypto library?
dnl ==========================================================================
AC_MSG_CHECKING(for crypto library) 
if test "z$XMLSEC_CRYPTO" = "z" ;  then
    AC_MSG_ERROR(At least one crypto library should exist for $PACKAGE)
else
    AC_MSG_RESULT(yes ('$XMLSEC_CRYPTO'))
fi


dnl ==========================================================================
dnl See do we need SHA1 suport
dnl ==========================================================================
AC_MSG_CHECKING(for SHA1 support) 
AC_ARG_ENABLE(sha1,   [  --enable-sha1           enable SHA1 support (yes)])
if test "z$enable_sha1" = "zno" ; then
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_SHA1=1"
    XMLSEC_NO_SHA1="1"
    AC_MSG_RESULT(no)
else
    XMLSEC_NO_SHA1="0"
    AC_MSG_RESULT(yes)
fi    
AM_CONDITIONAL(XMLSEC_NO_SHA1, test "z$XMLSEC_NO_SHA1" = "z1")
AC_SUBST(XMLSEC_NO_SHA1)

dnl ==========================================================================
dnl See do we need RIPEMD-160 suport
dnl ==========================================================================
AC_MSG_CHECKING(for RIPEMD-160 support) 
AC_ARG_ENABLE(ripemd160,   [  --enable-ripemd160      enable RIPEMD-160 support (yes)])
if test "z$enable_ripemd160" = "zno" ; then
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_RIPEMD160=1"
    XMLSEC_NO_RIPEMD160="1"
    AC_MSG_RESULT(no)
else
    XMLSEC_NO_RIPEMD160="0"
    AC_MSG_RESULT(yes)
fi    
AM_CONDITIONAL(XMLSEC_NO_RIPEMD160, test "z$XMLSEC_NO_RIPEMD160" = "z1")
AC_SUBST(XMLSEC_NO_RIPEMD160)

dnl ==========================================================================
dnl See do we need HMAC suport
dnl ==========================================================================
AC_MSG_CHECKING(for HMAC support) 
AC_ARG_ENABLE(hmac,   [  --enable-hmac           enable HMAC support (yes)])
if test "z$enable_hmac" = "zno" ; then
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_HMAC=1"
    XMLSEC_NO_HMAC="1"
    AC_MSG_RESULT(no)
else
    XMLSEC_NO_HMAC="0"
    AC_MSG_RESULT(yes)
fi    
AM_CONDITIONAL(XMLSEC_NO_HMAC, test "z$XMLSEC_NO_HMAC" = "z1")
AC_SUBST(XMLSEC_NO_HMAC)

dnl ==========================================================================
dnl See do we need DSA suport
dnl ==========================================================================
AC_MSG_CHECKING(for DSA support) 
AC_ARG_ENABLE(dsa,   [  --enable-dsa            enable DSA support (yes)])
if test "z$enable_dsa" = "zno" ; then
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_DSA=1"
    XMLSEC_NO_DSA="1"
    AC_MSG_RESULT(no)
else
    XMLSEC_NO_DSA="0"
    AC_MSG_RESULT(yes)
fi    
AM_CONDITIONAL(XMLSEC_NO_DSA, test "z$XMLSEC_NO_DSA" = "z1")
AC_SUBST(XMLSEC_NO_DSA)

dnl ==========================================================================
dnl See do we need RSA suport
dnl ==========================================================================
AC_MSG_CHECKING(for RSA support) 
AC_ARG_ENABLE(rsa,   [  --enable-rsa            enable RSA support (yes)])
if test "z$enable_rsa" = "zno" ; then
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_RSA=1"
    XMLSEC_NO_RSA="1"
    AC_MSG_RESULT(no)
else
    XMLSEC_NO_RSA="0"
    AC_MSG_RESULT(yes)
fi    
AM_CONDITIONAL(XMLSEC_NO_RSA, test "z$XMLSEC_NO_RSA" = "z1")
AC_SUBST(XMLSEC_NO_RSA)

dnl ==========================================================================
dnl See do we need x509 suport
dnl ==========================================================================
AC_MSG_CHECKING(for x509 support) 
AC_ARG_ENABLE(x509,   [  --enable-x509           enable x509 support (yes)])
if test "z$enable_x509" = "zno" ; then
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_X509=1"
    XMLSEC_NO_X509="1"
    AC_MSG_RESULT(no)
else
    XMLSEC_NO_X509="0"
    AC_MSG_RESULT(yes)
fi    
AM_CONDITIONAL(XMLSEC_NO_X509, test "z$XMLSEC_NO_X509" = "z1")
AC_SUBST(XMLSEC_NO_X509)

dnl ==========================================================================
dnl See do we need DES suport
dnl ==========================================================================
AC_MSG_CHECKING(for DES support) 
AC_ARG_ENABLE(des,   [  --enable-des            enable DES support (yes)])
if test "z$enable_des" = "zno" ; then
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_DES=1"
    XMLSEC_NO_DES="1"
    AC_MSG_RESULT(no)
else
    XMLSEC_NO_DES="0"
    AC_MSG_RESULT(yes)
fi    
AM_CONDITIONAL(XMLSEC_NO_DES, test "z$XMLSEC_NO_DES" = "z1")
AC_SUBST(XMLSEC_NO_DES)

dnl ==========================================================================
dnl See do we need AES suport
dnl ==========================================================================
AC_MSG_CHECKING(for AES support) 
AC_ARG_ENABLE(aes,   [  --enable-aes            enable AES support (OpenSSL >= 0.9.7 is required)])
if test "z$enable_aes" = "zno" ; then
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_AES=1"
    XMLSEC_NO_AES="1"
    AC_MSG_RESULT(no)
else
    XMLSEC_NO_AES="0"
    AC_MSG_RESULT(yes)
fi    
AM_CONDITIONAL(XMLSEC_NO_AES, test "z$XMLSEC_NO_AES" = "z1")
AC_SUBST(XMLSEC_NO_AES)

dnl ==========================================================================
dnl See do we need XMLDSig suport
dnl ==========================================================================
AC_MSG_CHECKING(for XMLDSig support) 
AC_ARG_ENABLE(xmldsig,   [  --enable-xmldsig        enable XMLDSig support (yes)])
if test "z$enable_xmldsig" = "zno" ; then
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_XMLDSIG=1"
    XMLSEC_NO_XMLDSIG="1"
    AC_MSG_RESULT(no)
else
    XMLSEC_NO_XMLDSIG="0"
    AC_MSG_RESULT(yes)
fi    
AM_CONDITIONAL(XMLSEC_NO_XMLDSIG, test "z$XMLSEC_NO_XMLDSIG" = "z1")
AC_SUBST(XMLSEC_NO_XMLDSIG)

dnl ==========================================================================
dnl See do we need XMLEnc suport
dnl ==========================================================================
AC_MSG_CHECKING(for XMLEnc support) 
AC_ARG_ENABLE(xmlenc,   [  --enable-xmlenc         enable XMLEnc support (yes)])
if test "z$enable_xmlenc" = "zno" ; then
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_XMLENC=1"
    XMLSEC_NO_XMLENC="1"
    AC_MSG_RESULT(no)
else
    XMLSEC_NO_XMLENC="0"
    AC_MSG_RESULT(yes)
fi    
AM_CONDITIONAL(XMLSEC_NO_XMLENC, test "z$XMLSEC_NO_XMLENC" = "z1")
AC_SUBST(XMLSEC_NO_XMLENC)

dnl ==========================================================================
dnl See do we need XKMS suport
dnl ==========================================================================
AC_MSG_CHECKING(for XMKMS support - under development, not stable yet) 
AC_ARG_ENABLE(xkms,   [  --enable-xkms           enable XKMS support - under development (no)])
if test "z$enable_xkms" = "zyes" ; then
    XMLSEC_NO_XKMS="0"
    AC_MSG_RESULT(yes)
else
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_XKMS=1"
    XMLSEC_NO_XKMS="1"
    AC_MSG_RESULT(no)
fi    
AM_CONDITIONAL(XMLSEC_NO_XKMS, test "z$XMLSEC_NO_XKMS" = "z1")
AC_SUBST(XMLSEC_NO_XKMS)

dnl ==========================================================================
dnl check if we need dynamic loading support
dnl ==========================================================================
XMLSEC_DL_INCLUDES=""
XMLSEC_DL_LIBS=""
AC_MSG_CHECKING(for xmlsec-crypto dynamic loading support) 
AC_ARG_ENABLE(crypto_dl,   [  --enable-crypto-dl      enable dynamic loading support for xmlsec-crypto libraries (yes)])
if test "z$enable_crypto_dl" = "zno" ; then
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_CRYPTO_DYNAMIC_LOADING=1"
    XMLSEC_NO_CRYPTO_DYNAMIC_LOADING="1"
    AC_MSG_RESULT(no)
else 
    XMLSEC_DL_INCLUDES="$INCLTDL"
    XMLSEC_DL_LIBS="$LIBLTDL $LIBADD_DL"
    XMLSEC_NO_CRYPTO_DYNAMIC_LOADING="0"
    AC_MSG_RESULT(yes)
fi    
AM_CONDITIONAL(XMLSEC_NO_CRYPTO_DYNAMIC_LOADING, test "z$XMLSEC_NO_CRYPTO_DYNAMIC_LOADING" = "z1")
AC_SUBST(XMLSEC_NO_CRYPTO_DYNAMIC_LOADING)
AC_SUBST(XMLSEC_DL_INCLUDES)
AC_SUBST(XMLSEC_DL_LIBS)

dnl ==========================================================================
dnl check if we need dynamic loading in the xmlsec apps
dnl ==========================================================================
AC_MSG_CHECKING(for xmlsec-crypto dynamic loading support in command line tool) 
AC_ARG_ENABLE(apps_crypto_dl,   [  --apps_enable-crypto-dl  enable dynamic loading support for xmlsec-crypto libraries in xmlsec command line tool (yes)])
if test "z$enable_apps_crypto_dl" = "z" ; then
    enable_apps_crypto_dl="$enable_crypto_dl"
fi
if test "z$enable_apps_crypto_dl" = "zno" ; then
    XMLSEC_NO_APPS_CRYPTO_DYNAMIC_LOADING="1"
    AC_MSG_RESULT(no)
elif test "z$enable_crypto_dl" = "zno" ; then
    AC_MSG_RESULT(no)
    AC_MSG_ERROR(xmlsec-crypto libraries dynamic loading support in xmlsec command line tool is requested but no dynamic loading in xmlsec itself is disabled)
else
    XMLSEC_APP_DEFINES="$XMLSEC_APP_DEFINES -DXMLSEC_CRYPTO_DYNAMIC_LOADING=1"
    XMLSEC_NO_APPS_CRYPTO_DYNAMIC_LOADING="0"
    AC_MSG_RESULT(yes)
fi    
AM_CONDITIONAL(XMLSEC_NO_APPS_CRYPTO_DYNAMIC_LOADING, 
    test "z$XMLSEC_NO_APPS_CRYPTO_DYNAMIC_LOADING" = "z1")
AC_SUBST(XMLSEC_NO_APPS_CRYPTO_DYNAMIC_LOADING)

dnl ==========================================================================
dnl See do we need Simple Keys Manager 
dnl ==========================================================================
AC_MSG_CHECKING(for Simple Keys Manager testing) 
AC_ARG_ENABLE(skm,   [  --enable-skm            enable Simple Keys Manager testing (yes)])
if test "z$enable_skm" = "zno" ; then
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_SKM_TEST=1"
    AC_MSG_RESULT(no)
else
    AC_MSG_RESULT(yes)
fi    

dnl ==========================================================================
dnl See do we need templates tests
dnl ==========================================================================
AC_MSG_CHECKING(for templates testing) 
AC_ARG_ENABLE(skm,   [  --enable-tmpl-tests     enable templates testing in xmlsec utility (yes)])
if test "z$enable_tmpl_tests" = "zyes" ; then
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_TMPL_TEST=1"
    AC_MSG_RESULT(no)
else
    AC_MSG_RESULT(yes)
fi    

dnl ==========================================================================
dnl Debug 
dnl ==========================================================================
AC_MSG_CHECKING(for debuging) 
AC_ARG_ENABLE(debuging,   [  --enable-debuging       enable debuging compilation flags (no)])
if test "z$enable_debuging" = "zyes" ; then
    CFLAGS="$CFLAGS -g"
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi    

dnl ==========================================================================
dnl Profiling 
dnl ==========================================================================
AC_MSG_CHECKING(for profiling) 
AC_ARG_ENABLE(profiling,   [  --enable-profiling      enable profiling compilation flags (no)])
if test "z$enable_profiling" = "zyes" ; then
    CFLAGS="$CFLAGS -pg"
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi 

dnl ==========================================================================
dnl Pedantic compilation
dnl ==========================================================================
AC_MSG_CHECKING(for pedantic) 
AC_ARG_ENABLE(pedantic,   [  --enable-pedantic       enable pedantic compilation flags (no)])
if test "z$enable_pedantic" = "zyes" ; then
    dnl CFLAGS="$CFLAGS -pedantic -Wall -ansi -W -Wunused -Wimplicit -Wreturn-type -Wswitch -Wcomment -Wtrigraphs -Wformat -Wchar-subscripts -Wuninitialized -Wparentheses -Wshadow -Wpointer-arith -Wcast-align -Wwrite-strings -Waggregate-return -Wstrict-prototypes -Wmissing-prototypes -Wnested-externs -Winline -Wredundant-decls"
    CFLAGS="$CFLAGS -O -pedantic -Wall -ansi -fno-inline -W -Wunused -Wimplicit -Wreturn-type -Wswitch -Wcomment -Wtrigraphs -Wformat -Wchar-subscripts -Wuninitialized -Wparentheses -Wshadow -Wpointer-arith -Wcast-align -Wwrite-strings -Waggregate-return -Wmissing-prototypes -Wnested-externs -Winline -Wredundant-decls"
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi    

dnl ==========================================================================
dnl Static linking
dnl ==========================================================================
XMLSEC_STATIC_BINARIES=""
AC_MSG_CHECKING(for static linking) 
AC_ARG_ENABLE(static_linking,   [  --enable-static-linking enable static linking (no)])
if test "z$enable_static_linking" = "zyes" ; then
    XMLSEC_STATIC_BINARIES="-static"
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi    
AC_SUBST(XMLSEC_STATIC_BINARIES)

dnl ==========================================================================
dnl Final steps: xmlsec config
dnl ==========================================================================
XMLSEC_CORE_CFLAGS="$XMLSEC_DEFINES -I${includedir}/xmlsec1  $XMLSEC_DL_INCLUDES"
XMLSEC_CORE_LIBS="-lxmlsec1 $XMLSEC_DL_LIBS "
AC_SUBST(XMLSEC_CORE_CFLAGS)
AC_SUBST(XMLSEC_CORE_LIBS)

dnl used in xmlsecConf.sh*
XMLSEC_LIBDIR="${libdir}"
AC_SUBST(XMLSEC_LIBDIR)

XMLSEC_OPENSSL_CFLAGS="$XMLSEC_CORE_CFLAGS $OPENSSL_CFLAGS"
XMLSEC_OPENSSL_LIBS="-L${libdir} -l$OPENSSL_CRYPTO_LIB $XMLSEC_CORE_LIBS $OPENSSL_LIBS"
AC_SUBST(XMLSEC_OPENSSL_CFLAGS)
AC_SUBST(XMLSEC_OPENSSL_LIBS)

XMLSEC_GNUTLS_CFLAGS="$XMLSEC_CORE_CFLAGS $GNUTLS_CFLAGS"
XMLSEC_GNUTLS_LIBS="-L${libdir} -l$GNUTLS_CRYPTO_LIB $XMLSEC_CORE_LIBS $GNUTLS_LIBS"
AC_SUBST(XMLSEC_GNUTLS_CFLAGS)
AC_SUBST(XMLSEC_GNUTLS_LIBS)

XMLSEC_NSS_CFLAGS="$XMLSEC_CORE_CFLAGS $NSS_CFLAGS"
XMLSEC_NSS_LIBS="-L${libdir} -l$NSS_CRYPTO_LIB $XMLSEC_CORE_LIBS $NSS_LIBS"
AC_SUBST(XMLSEC_NSS_CFLAGS)
AC_SUBST(XMLSEC_NSS_LIBS)

XMLSEC_CFLAGS="$XMLSEC_CORE_CFLAGS $LIBXML_CFLAGS $LIBXSLT_CFLAGS $XMLSEC_CRYPTO_CFLAGS"
XMLSEC_LIBS="-L${libdir} -l$XMLSEC_CRYPTO_LIB $XMLSEC_CORE_LIBS $LIBXML_LIBS $LIBXSLT_LIBS $XMLSEC_CRYPTO_LIBS"
AC_SUBST(XMLSEC_CFLAGS)
AC_SUBST(XMLSEC_LIBS)

AC_SUBST(XMLSEC_DEFINES)
AC_SUBST(XMLSEC_APP_DEFINES)
AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)

AC_SUBST(XMLSEC_CRYPTO)
AC_SUBST(XMLSEC_CRYPTO_LIST)
AC_SUBST(XMLSEC_CRYPTO_DISABLED_LIST)
AC_SUBST(XMLSEC_CRYPTO_LIB)
AC_SUBST(XMLSEC_CRYPTO_CFLAGS)
AC_SUBST(XMLSEC_CRYPTO_LIBS)
AC_SUBST(XMLSEC_CRYPTO_LDADDS)

XMLSEC_CRYPTO_PC_FILES_LIST=""
for i in $XMLSEC_CRYPTO_LIST ; do
    XMLSEC_CRYPTO_PC_FILES_LIST="$XMLSEC_CRYPTO_PC_FILES_LIST $PACKAGE-$i.pc"
done
AC_SUBST(XMLSEC_CRYPTO_PC_FILES_LIST)

dnl ==========================================================================
dnl Writing result files
dnl ==========================================================================
AC_OUTPUT([
include/xmlsec/version.h
Makefile
include/Makefile
include/xmlsec/Makefile
src/Makefile
apps/Makefile
docs/Makefile
docs/api/Makefile
man/Makefile
]
[xmlsec1Conf.sh:xmlsecConf.sh.in]
[xmlsec1-config:xmlsec-config.in]
[xmlsec1-openssl.pc:xmlsec-openssl.pc.in]
[xmlsec1-gnutls.pc:xmlsec-gnutls.pc.in]
[xmlsec1-nss.pc:xmlsec-nss.pc.in]
[xmlsec1.spec:xmlsec.spec.in]
)


dnl COPYING should be in "srcdir" not in "builddir"
(cd $srcdir && rm -f COPYING.LIB COPYING && $LN_S Copyright COPYING)

if test "z$XMLSEC_NO_OPENSSL" != "z1" ; then
AC_OUTPUT([include/xmlsec/openssl/Makefile src/openssl/Makefile])
fi

if test "z$XMLSEC_NO_GNUTLS" != "z1" ; then
AC_OUTPUT([include/xmlsec/gnutls/Makefile src/gnutls/Makefile])
fi

if test "z$XMLSEC_NO_NSS" != "z1" ; then
AC_OUTPUT([include/xmlsec/nss/Makefile src/nss/Makefile])
fi

if test "z$XMLSEC_NO_CRYPTO_DYNAMIC_LOADING" = "z1" ; then
(rm -f xmlsec1.pc && $LN_S xmlsec1-$XMLSEC_CRYPTO.pc xmlsec1.pc)
else
AC_OUTPUT([xmlsec1.pc:xmlsec.pc.in])
fi
