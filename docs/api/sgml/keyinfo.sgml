<refentry id="xmlsec-keyinfo">
<refmeta>
<refentrytitle>keyinfo</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>keyinfo</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



int         <link linkend="xmlSecKeyInfoNodeRead">xmlSecKeyInfoNodeRead</link>           (<link linkend="xmlNode">xmlNodePtr</link> keyInfoNode,
                                             <link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             <link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> keyInfoCtx);
int         <link linkend="xmlSecKeyInfoNodeWrite">xmlSecKeyInfoNodeWrite</link>          (<link linkend="xmlNode">xmlNodePtr</link> keyInfoNode,
                                             <link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             <link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> keyInfoCtx);
enum        <link linkend="xmlSecKeyInfoMode">xmlSecKeyInfoMode</link>;
#define     <link linkend="XMLSEC-KEYINFO-FLAGS-DONT-STOP-ON-KEY-FOUND-CAPS">XMLSEC_KEYINFO_FLAGS_DONT_STOP_ON_KEY_FOUND</link>
#define     <link linkend="XMLSEC-KEYINFO-FLAGS-STOP-ON-UNKNOWN-CHILD-CAPS">XMLSEC_KEYINFO_FLAGS_STOP_ON_UNKNOWN_CHILD</link>
#define     <link linkend="XMLSEC-KEYINFO-FLAGS-KEYNAME-STOP-ON-UNKNOWN-CAPS">XMLSEC_KEYINFO_FLAGS_KEYNAME_STOP_ON_UNKNOWN</link>
#define     <link linkend="XMLSEC-KEYINFO-FLAGS-KEYVALUE-STOP-ON-UNKNOWN-CHILD-CAPS">XMLSEC_KEYINFO_FLAGS_KEYVALUE_STOP_ON_UNKNOWN_CHILD</link>
#define     <link linkend="XMLSEC-KEYINFO-FLAGS-RETRMETHOD-STOP-ON-UNKNOWN-HREF-CAPS">XMLSEC_KEYINFO_FLAGS_RETRMETHOD_STOP_ON_UNKNOWN_HREF</link>
#define     <link linkend="XMLSEC-KEYINFO-FLAGS-RETRMETHOD-STOP-ON-MISMATCH-HREF-CAPS">XMLSEC_KEYINFO_FLAGS_RETRMETHOD_STOP_ON_MISMATCH_HREF</link>
#define     <link linkend="XMLSEC-KEYINFO-FLAGS-X509DATA-STOP-ON-UNKNOWN-CHILD-CAPS">XMLSEC_KEYINFO_FLAGS_X509DATA_STOP_ON_UNKNOWN_CHILD</link>
#define     <link linkend="XMLSEC-KEYINFO-FLAGS-X509DATA-DONT-VERIFY-CERTS-CAPS">XMLSEC_KEYINFO_FLAGS_X509DATA_DONT_VERIFY_CERTS</link>
#define     <link linkend="XMLSEC-KEYINFO-FLAGS-X509DATA-STOP-ON-UNKNOWN-CERT-CAPS">XMLSEC_KEYINFO_FLAGS_X509DATA_STOP_ON_UNKNOWN_CERT</link>
#define     <link linkend="XMLSEC-KEYINFO-FLAGS-X509DATA-STOP-ON-INVALID-CERT-CAPS">XMLSEC_KEYINFO_FLAGS_X509DATA_STOP_ON_INVALID_CERT</link>
#define     <link linkend="XMLSEC-KEYINFO-FLAGS-ENCKEY-DONT-STOP-ON-FAILED-DECRYPTION-CAPS">XMLSEC_KEYINFO_FLAGS_ENCKEY_DONT_STOP_ON_FAILED_DECRYPTION</link>
#define     <link linkend="XMLSEC-KEYINFO-FLAGS-X509DATA-SKIP-STRICT-CHECKS-CAPS">XMLSEC_KEYINFO_FLAGS_X509DATA_SKIP_STRICT_CHECKS</link>
struct      <link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtx</link>;
<link linkend="xmlSecKeyInfoCtxPtr">xmlSecKeyInfoCtxPtr</link> <link linkend="xmlSecKeyInfoCtxCreate">xmlSecKeyInfoCtxCreate</link>  (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> keysMngr);
void        <link linkend="xmlSecKeyInfoCtxDestroy">xmlSecKeyInfoCtxDestroy</link>         (<link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> keyInfoCtx);
int         <link linkend="xmlSecKeyInfoCtxInitialize">xmlSecKeyInfoCtxInitialize</link>      (<link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> keyInfoCtx,
                                             <link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> keysMngr);
void        <link linkend="xmlSecKeyInfoCtxFinalize">xmlSecKeyInfoCtxFinalize</link>        (<link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> keyInfoCtx);
void        <link linkend="xmlSecKeyInfoCtxReset">xmlSecKeyInfoCtxReset</link>           (<link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> keyInfoCtx);
int         <link linkend="xmlSecKeyInfoCtxCopyUserPref">xmlSecKeyInfoCtxCopyUserPref</link>    (<link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> dst,
                                             <link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> src);
int         <link linkend="xmlSecKeyInfoCtxCreateEncCtx">xmlSecKeyInfoCtxCreateEncCtx</link>    (<link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> keyInfoCtx);
void        <link linkend="xmlSecKeyInfoCtxDebugDump">xmlSecKeyInfoCtxDebugDump</link>       (<link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> keyInfoCtx,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
void        <link linkend="xmlSecKeyInfoCtxDebugXmlDump">xmlSecKeyInfoCtxDebugXmlDump</link>    (<link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> keyInfoCtx,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
#define     <link linkend="xmlSecKeyDataNameId">xmlSecKeyDataNameId</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <link linkend="xmlSecKeyDataNameGetKlass">xmlSecKeyDataNameGetKlass</link>   (void);
#define     <link linkend="xmlSecKeyDataValueId">xmlSecKeyDataValueId</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <link linkend="xmlSecKeyDataValueGetKlass">xmlSecKeyDataValueGetKlass</link>  (void);
#define     <link linkend="xmlSecKeyDataRetrievalMethodId">xmlSecKeyDataRetrievalMethodId</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <link linkend="xmlSecKeyDataRetrievalMethodGetKlass">xmlSecKeyDataRetrievalMethodGetKlass</link>
                                            (void);
#define     <link linkend="xmlSecKeyDataEncryptedKeyId">xmlSecKeyDataEncryptedKeyId</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <link linkend="xmlSecKeyDataEncryptedKeyGetKlass">xmlSecKeyDataEncryptedKeyGetKlass</link>
                                            (void);
</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="xmlSecKeyInfoNodeRead">xmlSecKeyInfoNodeRead ()</title>
<programlisting>int         xmlSecKeyInfoNodeRead           (<link linkend="xmlNode">xmlNodePtr</link> keyInfoNode,
                                             <link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             <link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> keyInfoCtx);</programlisting>
<para>
Parses the <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> element <parameter>keyInfoNode</parameter>, extracts the key data
and stores into <parameter>key</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keyInfoNode</parameter>&nbsp;:</term>
<listitem><simpara> 	the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> node.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to result key object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyInfoCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> element processing context.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or -1 if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyInfoNodeWrite">xmlSecKeyInfoNodeWrite ()</title>
<programlisting>int         xmlSecKeyInfoNodeWrite          (<link linkend="xmlNode">xmlNodePtr</link> keyInfoNode,
                                             <link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             <link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> keyInfoCtx);</programlisting>
<para>
Writes the <parameter>key</parameter> into the <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> element template <parameter>keyInfoNode</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keyInfoNode</parameter>&nbsp;:</term>
<listitem><simpara> 	the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> node.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyInfoCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> element processing context.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or -1 if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyInfoMode">enum xmlSecKeyInfoMode</title>
<programlisting>typedef enum {
    xmlSecKeyInfoModeRead = 0,
    xmlSecKeyInfoModeWrite
} xmlSecKeyInfoMode;
</programlisting>
<para>
The <parameter>xmlSecKeyInfoCtx</parameter> operation mode (read or write).</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><literal>xmlSecKeyInfoModeRead</literal></term>
<listitem><simpara> read <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo ">&lt;dsig:KeyInfo /&gt;</ulink> element.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>xmlSecKeyInfoModeWrite</literal></term>
<listitem><simpara> write <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo ">&lt;dsig:KeyInfo /&gt;</ulink> element.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="XMLSEC-KEYINFO-FLAGS-DONT-STOP-ON-KEY-FOUND-CAPS">XMLSEC_KEYINFO_FLAGS_DONT_STOP_ON_KEY_FOUND</title>
<programlisting>#define XMLSEC_KEYINFO_FLAGS_DONT_STOP_ON_KEY_FOUND		0x00000001
</programlisting>
<para>
If flag is set then we will continue reading <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo ">&lt;dsig:KeyInfo /&gt;</ulink> 
element even when key is already found.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XMLSEC-KEYINFO-FLAGS-STOP-ON-UNKNOWN-CHILD-CAPS">XMLSEC_KEYINFO_FLAGS_STOP_ON_UNKNOWN_CHILD</title>
<programlisting>#define XMLSEC_KEYINFO_FLAGS_STOP_ON_UNKNOWN_CHILD		0x00000002
</programlisting>
<para>
If flag is set then we abort if an unknown <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo ">&lt;dsig:KeyInfo /&gt;</ulink> 
child is found.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XMLSEC-KEYINFO-FLAGS-KEYNAME-STOP-ON-UNKNOWN-CAPS">XMLSEC_KEYINFO_FLAGS_KEYNAME_STOP_ON_UNKNOWN</title>
<programlisting>#define XMLSEC_KEYINFO_FLAGS_KEYNAME_STOP_ON_UNKNOWN		0x00000004
</programlisting>
<para>
If flags is set then we abort if an unknown key name 
(content of <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyName ">&lt;dsig:KeyName /&gt;</ulink> element) is found.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XMLSEC-KEYINFO-FLAGS-KEYVALUE-STOP-ON-UNKNOWN-CHILD-CAPS">XMLSEC_KEYINFO_FLAGS_KEYVALUE_STOP_ON_UNKNOWN_CHILD</title>
<programlisting>#define XMLSEC_KEYINFO_FLAGS_KEYVALUE_STOP_ON_UNKNOWN_CHILD	0x00000008
</programlisting>
<para>
If flags is set then we abort if an unknown <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyValue ">&lt;dsig:KeyValue /&gt;</ulink> 
child is found.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XMLSEC-KEYINFO-FLAGS-RETRMETHOD-STOP-ON-UNKNOWN-HREF-CAPS">XMLSEC_KEYINFO_FLAGS_RETRMETHOD_STOP_ON_UNKNOWN_HREF</title>
<programlisting>#define XMLSEC_KEYINFO_FLAGS_RETRMETHOD_STOP_ON_UNKNOWN_HREF	0x00000010
</programlisting>
<para>
If flag is set then we abort if an unknown href attribute
of <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-RetrievalMethod ">&lt;dsig:RetrievalMethod /&gt;</ulink> element is found.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XMLSEC-KEYINFO-FLAGS-RETRMETHOD-STOP-ON-MISMATCH-HREF-CAPS">XMLSEC_KEYINFO_FLAGS_RETRMETHOD_STOP_ON_MISMATCH_HREF</title>
<programlisting>#define XMLSEC_KEYINFO_FLAGS_RETRMETHOD_STOP_ON_MISMATCH_HREF	0x00000020
</programlisting>
<para>
If flag is set then we abort if an href attribute <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-RetrievalMethod ">&lt;dsig:RetrievalMethod /&gt;</ulink> 
element does not match the real key data type.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XMLSEC-KEYINFO-FLAGS-X509DATA-STOP-ON-UNKNOWN-CHILD-CAPS">XMLSEC_KEYINFO_FLAGS_X509DATA_STOP_ON_UNKNOWN_CHILD</title>
<programlisting>#define XMLSEC_KEYINFO_FLAGS_X509DATA_STOP_ON_UNKNOWN_CHILD	0x00000100
</programlisting>
<para>
If flags is set then we abort if an unknown <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-X509Data ">&lt;dsig:X509Data /&gt;</ulink> 
child is found.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XMLSEC-KEYINFO-FLAGS-X509DATA-DONT-VERIFY-CERTS-CAPS">XMLSEC_KEYINFO_FLAGS_X509DATA_DONT_VERIFY_CERTS</title>
<programlisting>#define XMLSEC_KEYINFO_FLAGS_X509DATA_DONT_VERIFY_CERTS		0x00000200
</programlisting>
<para>
If flag is set then we'll load certificates from <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-X509Data ">&lt;dsig:X509Data /&gt;</ulink>
element without verification.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XMLSEC-KEYINFO-FLAGS-X509DATA-STOP-ON-UNKNOWN-CERT-CAPS">XMLSEC_KEYINFO_FLAGS_X509DATA_STOP_ON_UNKNOWN_CERT</title>
<programlisting>#define XMLSEC_KEYINFO_FLAGS_X509DATA_STOP_ON_UNKNOWN_CERT	0x00000400
</programlisting>
<para>
If flag is set then we'll stop when we could not resolve reference
to certificate from <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-X509IssuerSerial ">&lt;dsig:X509IssuerSerial /&gt;</ulink>, <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-X509SKI ">&lt;dsig:X509SKI /&gt;</ulink> or 
<ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-X509SubjectName ">&lt;dsig:X509SubjectName /&gt;</ulink> elements.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XMLSEC-KEYINFO-FLAGS-X509DATA-STOP-ON-INVALID-CERT-CAPS">XMLSEC_KEYINFO_FLAGS_X509DATA_STOP_ON_INVALID_CERT</title>
<programlisting>#define XMLSEC_KEYINFO_FLAGS_X509DATA_STOP_ON_INVALID_CERT	0x00000800
</programlisting>
<para>
If the flag is set then we'll stop when <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-X509Data ">&lt;dsig:X509Data /&gt;</ulink> element
processing does not return a verified certificate.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XMLSEC-KEYINFO-FLAGS-ENCKEY-DONT-STOP-ON-FAILED-DECRYPTION-CAPS">XMLSEC_KEYINFO_FLAGS_ENCKEY_DONT_STOP_ON_FAILED_DECRYPTION</title>
<programlisting>#define XMLSEC_KEYINFO_FLAGS_ENCKEY_DONT_STOP_ON_FAILED_DECRYPTION 0x00001000
</programlisting>
<para>
If the flag is set then we'll stop when <ulink URL="http://www.w3.org/TR/xmlenc-core/#sec-EncryptedKey ">&lt;enc:EncryptedKey /&gt;</ulink> element
processing fails.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XMLSEC-KEYINFO-FLAGS-X509DATA-SKIP-STRICT-CHECKS-CAPS">XMLSEC_KEYINFO_FLAGS_X509DATA_SKIP_STRICT_CHECKS</title>
<programlisting>#define XMLSEC_KEYINFO_FLAGS_X509DATA_SKIP_STRICT_CHECKS	0x00002000
</programlisting>
<para>
If the flag is set then we'll skip strict checking of certs and CRLs</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyInfoCtx">struct xmlSecKeyInfoCtx</title>
<programlisting>struct xmlSecKeyInfoCtx {
    void*				userData;
    unsigned int			flags;
    unsigned int			flags2;
    xmlSecKeysMngrPtr			keysMngr;
    xmlSecKeyInfoMode			mode;
    xmlSecPtrList			enabledKeyData;
    int					base64LineSize;
        
    /* RetrievalMethod */
    xmlSecTransformCtx			retrievalMethodCtx;
    int 				maxRetrievalMethodLevel;


    /* EncryptedKey */
    xmlSecEncCtxPtr			encCtx;
    int					maxEncryptedKeyLevel; 

	    

    /* x509 certificates */
    time_t				certsVerificationTime;
    int					certsVerificationDepth;


    /* PGP */
    void*				pgpReserved;	/* TODO */
        
    /* internal data */
    int 				curRetrievalMethodLevel;
    int					curEncryptedKeyLevel;                
    xmlSecKeyReq			keyReq;

    /* for the future */
    void*				reserved0;
    void*				reserved1;
};
</programlisting>
<para>
The <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo ">&lt;dsig:KeyInfo /&gt;</ulink> reading or writing context.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term>void *<structfield>userData</structfield></term>
<listitem><simpara>		the pointer to user data (xmlsec and xmlsec-crypto 
		never touch this).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>unsigned int <structfield>flags</structfield></term>
<listitem><simpara> 		the bit mask for flags that control processin.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>unsigned int <structfield>flags2</structfield></term>
<listitem><simpara> 		reserved for future.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> <structfield>keysMngr</structfield></term>
<listitem><simpara>		the pointer to current keys manager.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecKeyInfoMode">xmlSecKeyInfoMode</link> <structfield>mode</structfield></term>
<listitem><simpara> 		do we read or write <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo ">&lt;dsig:KeyInfo /&gt;</ulink> element.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecPtrList">xmlSecPtrList</link> <structfield>enabledKeyData</structfield></term>
<listitem><simpara> 	the list of enabled <parameter>xmlSecKeyDataId</parameter> (if list is 
		empty then all data ids are enabled).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>int <structfield>base64LineSize</structfield></term>
<listitem><simpara>	the max columns size for base64 encoding.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecTransformCtx">xmlSecTransformCtx</link> <structfield>retrievalMethodCtx</structfield></term>
<listitem><simpara> the transforms context for <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-RetrievalMethod ">&lt;dsig:RetrievalMethod /&gt;</ulink>
			element processing.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>int <structfield>maxRetrievalMethodLevel</structfield></term>
<listitem><simpara> the max recursion level when processing
		<ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-RetrievalMethod ">&lt;dsig:RetrievalMethod /&gt;</ulink> element; default level is 1 
		(see also <parameter>curRetrievalMethodLevel</parameter>).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecEncCtx">xmlSecEncCtxPtr</link> <structfield>encCtx</structfield></term>
<listitem><simpara>		the encryption context for <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-EncryptedKey ">&lt;dsig:EncryptedKey /&gt;</ulink> element
		processing.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>int <structfield>maxEncryptedKeyLevel</structfield></term>
<listitem><simpara> the max recursion level when processing 
		<ulink URL="http://www.w3.org/TR/xmlenc-core/#sec-EncryptedKey ">&lt;enc:EncryptedKey /&gt;</ulink> element; default level is 1 
		(see <parameter>curEncryptedKeyLevel</parameter>).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="time-t">time_t</link> <structfield>certsVerificationTime</structfield></term>
<listitem><simpara> the time to use for X509 certificates verification
		("not valid before" and "not valid after" checks);
		if <parameter>certsVerificationTime</parameter> is equal to 0 (default) 
		then we verify certificates against the system's 
		clock "now".
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>int <structfield>certsVerificationDepth</structfield></term>
<listitem><simpara> the max certifications chain length (default is 9).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>void *<structfield>pgpReserved</structfield></term>
<listitem><simpara>	reserved for PGP.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>int <structfield>curRetrievalMethodLevel</structfield></term>
<listitem><simpara> the current <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-RetrievalMethod ">&lt;dsig:RetrievalMethod /&gt;</ulink> element 
		processing level (see <parameter>maxRetrievalMethodLevel</parameter>).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>int <structfield>curEncryptedKeyLevel</structfield></term>
<listitem><simpara> the current <ulink URL="http://www.w3.org/TR/xmlenc-core/#sec-EncryptedKey ">&lt;enc:EncryptedKey /&gt;</ulink> element
		processing level (see <parameter>maxEncryptedKeyLevel</parameter>).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecKeyReq">xmlSecKeyReq</link> <structfield>keyReq</structfield></term>
<listitem><simpara>		the current key requirements.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>void *<structfield>reserved0</structfield></term>
<listitem><simpara>		reserved for the future.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>void *<structfield>reserved1</structfield></term>
<listitem><simpara>		reserved for the future.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyInfoCtxCreate">xmlSecKeyInfoCtxCreate ()</title>
<programlisting><link linkend="xmlSecKeyInfoCtxPtr">xmlSecKeyInfoCtxPtr</link> xmlSecKeyInfoCtxCreate  (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> keysMngr);</programlisting>
<para>
Allocates and initializes <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> element processing context.
Caller is responsible for freeing it by calling <link linkend="xmlSecKeyInfoCtxDestroy">xmlSecKeyInfoCtxDestroy</link> 
function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keysMngr</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to keys manager (may be NULL).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to newly allocated object or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyInfoCtxDestroy">xmlSecKeyInfoCtxDestroy ()</title>
<programlisting>void        xmlSecKeyInfoCtxDestroy         (<link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> keyInfoCtx);</programlisting>
<para>
Destroys <parameter>keyInfoCtx</parameter> object created with <link linkend="xmlSecKeyInfoCtxCreate">xmlSecKeyInfoCtxCreate</link> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keyInfoCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> element processing context.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyInfoCtxInitialize">xmlSecKeyInfoCtxInitialize ()</title>
<programlisting>int         xmlSecKeyInfoCtxInitialize      (<link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> keyInfoCtx,
                                             <link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> keysMngr);</programlisting>
<para>
Initializes <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> element processing context. Caller is 
responsible for cleaning it up by <link linkend="xmlSecKeyInfoCtxFinalize">xmlSecKeyInfoCtxFinalize</link> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keyInfoCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> element processing context.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keysMngr</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to keys manager (may be NULL).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success and a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyInfoCtxFinalize">xmlSecKeyInfoCtxFinalize ()</title>
<programlisting>void        xmlSecKeyInfoCtxFinalize        (<link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> keyInfoCtx);</programlisting>
<para>
Cleans up the <parameter>keyInfoCtx</parameter> initialized with <link linkend="xmlSecKeyInfoCtxInitialize">xmlSecKeyInfoCtxInitialize</link>
function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keyInfoCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> element processing context.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyInfoCtxReset">xmlSecKeyInfoCtxReset ()</title>
<programlisting>void        xmlSecKeyInfoCtxReset           (<link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> keyInfoCtx);</programlisting>
<para>
Resets the <parameter>keyInfoCtx</parameter> state. User settings are not changed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keyInfoCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> element processing context.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyInfoCtxCopyUserPref">xmlSecKeyInfoCtxCopyUserPref ()</title>
<programlisting>int         xmlSecKeyInfoCtxCopyUserPref    (<link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> dst,
                                             <link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> src);</programlisting>
<para>
Copies user preferences from <parameter>src</parameter> context to <parameter>dst</parameter> context.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dst</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to destination context object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to source context object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success and a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyInfoCtxCreateEncCtx">xmlSecKeyInfoCtxCreateEncCtx ()</title>
<programlisting>int         xmlSecKeyInfoCtxCreateEncCtx    (<link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> keyInfoCtx);</programlisting>
<para>
Creates encryption context form processing <ulink URL="http://www.w3.org/TR/xmlenc-core/#sec-EncryptedKey">&lt;enc:EncryptedKey/&gt;</ulink> child
of <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> element.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keyInfoCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> element processing context.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success and a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyInfoCtxDebugDump">xmlSecKeyInfoCtxDebugDump ()</title>
<programlisting>void        xmlSecKeyInfoCtxDebugDump       (<link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> keyInfoCtx,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>
Prints user settings and current context state to <parameter>output</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keyInfoCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> element processing context.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&nbsp;:</term>
<listitem><simpara>		the output file pointer.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyInfoCtxDebugXmlDump">xmlSecKeyInfoCtxDebugXmlDump ()</title>
<programlisting>void        xmlSecKeyInfoCtxDebugXmlDump    (<link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> keyInfoCtx,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>
Prints user settings and current context state in XML format to <parameter>output</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keyInfoCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> element processing context.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&nbsp;:</term>
<listitem><simpara>		the output file pointer.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataNameId">xmlSecKeyDataNameId</title>
<programlisting>#define xmlSecKeyDataNameId 		xmlSecKeyDataNameGetKlass()
</programlisting>
<para>
The &lt;dsig:KeyName&gt; processing class.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataNameGetKlass">xmlSecKeyDataNameGetKlass ()</title>
<programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> xmlSecKeyDataNameGetKlass   (void);</programlisting>
<para>
The <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyName">&lt;dsig:KeyName/&gt;</ulink> element key data klass 
(http://www.w3.org/TR/xmldsig-core/<link linkend="sec-KeyName">sec-KeyName</link>):
</para>
<para>
The KeyName element contains a string value (in which white space is 
significant) which may be used by the signer to communicate a key 
identifier to the recipient. Typically, KeyName contains an identifier 
related to the key pair used to sign the message, but it may contain 
other protocol-related information that indirectly identifies a key pair. 
(Common uses of KeyName include simple string names for keys, a key index, 
a distinguished name (DN), an email address, etc.)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyName">&lt;dsig:KeyName/&gt;</ulink> element processing key data klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataValueId">xmlSecKeyDataValueId</title>
<programlisting>#define xmlSecKeyDataValueId		xmlSecKeyDataValueGetKlass()
</programlisting>
<para>
The &lt;dsig:KeyValue&gt; processing class.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataValueGetKlass">xmlSecKeyDataValueGetKlass ()</title>
<programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> xmlSecKeyDataValueGetKlass  (void);</programlisting>
<para>
The <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyValue">&lt;dsig:KeyValue/&gt;</ulink> element key data klass 
(http://www.w3.org/TR/xmldsig-core/<link linkend="sec-KeyValue">sec-KeyValue</link>):
</para>
<para>
The KeyValue element contains a single public key that may be useful in 
validating the signature.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyValue">&lt;dsig:KeyValue/&gt;</ulink> element processing key data klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataRetrievalMethodId">xmlSecKeyDataRetrievalMethodId</title>
<programlisting>#define xmlSecKeyDataRetrievalMethodId	xmlSecKeyDataRetrievalMethodGetKlass()
</programlisting>
<para>
The &lt;dsig:RetrievalMethod&gt; processing class.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataRetrievalMethodGetKlass">xmlSecKeyDataRetrievalMethodGetKlass ()</title>
<programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> xmlSecKeyDataRetrievalMethodGetKlass
                                            (void);</programlisting>
<para>
The <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-RetrievalMethod">&lt;dsig:RetrievalMethod/&gt;</ulink> element key data klass 
(http://www.w3.org/TR/xmldsig-core/<link linkend="sec-RetrievalMethod">sec-RetrievalMethod</link>):
A RetrievalMethod element within KeyInfo is used to convey a reference to 
KeyInfo information that is stored at another location. For example, 
several signatures in a document might use a key verified by an X.509v3 
certificate chain appearing once in the document or remotely outside the 
document; each signature's KeyInfo can reference this chain using a single 
RetrievalMethod element instead of including the entire chain with a 
sequence of X509Certificate elements.
</para>
<para>
RetrievalMethod uses the same syntax and dereferencing behavior as 
Reference's URI and The Reference Processing Model.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-RetrievalMethod">&lt;dsig:RetrievalMethod/&gt;</ulink> element processing key data klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataEncryptedKeyId">xmlSecKeyDataEncryptedKeyId</title>
<programlisting>#define xmlSecKeyDataEncryptedKeyId	xmlSecKeyDataEncryptedKeyGetKlass()
</programlisting>
<para>
The &lt;enc:EncryptedKey&gt; processing class.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataEncryptedKeyGetKlass">xmlSecKeyDataEncryptedKeyGetKlass ()</title>
<programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> xmlSecKeyDataEncryptedKeyGetKlass
                                            (void);</programlisting>
<para>
The <ulink URL="http://www.w3.org/TR/xmlenc-core/#sec-EncryptedKey">&lt;enc:EncryptedKey/&gt;</ulink> element key data klass 
(http://www.w3.org/TR/xmlenc-core/<link linkend="sec-EncryptedKey">sec-EncryptedKey</link>):
</para>
<para>
The EncryptedKey element is used to transport encryption keys from 
the originator to a known recipient(s). It may be used as a stand-alone 
XML document, be placed within an application document, or appear inside 
an EncryptedData element as a child of a ds:KeyInfo element. The key value 
is always encrypted to the recipient(s). When EncryptedKey is decrypted the 
resulting octets are made available to the EncryptionMethod algorithm 
without any additional processing.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the <ulink URL="http://www.w3.org/TR/xmlenc-core/#sec-EncryptedKey">&lt;enc:EncryptedKey/&gt;</ulink> element processing key data klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
