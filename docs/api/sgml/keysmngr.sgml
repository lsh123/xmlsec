<refentry id="xmlsec-keysmngr">
<refmeta>
<refentrytitle>keysmngr</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>keysmngr</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> <link linkend="xmlSecKeysMngrCreate">xmlSecKeysMngrCreate</link>      (void);
void        <link linkend="xmlSecKeysMngrDestroy">xmlSecKeysMngrDestroy</link>           (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr);
<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> <link linkend="xmlSecKeysMngrFindKey">xmlSecKeysMngrFindKey</link>          (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const <link linkend="xmlChar">xmlChar</link> *name,
                                             <link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> keyInfoCtx);
int         <link linkend="xmlSecKeysMngrAdoptKeysStore">xmlSecKeysMngrAdoptKeysStore</link>    (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             <link linkend="xmlSecKeyStore">xmlSecKeyStorePtr</link> store);
<link linkend="xmlSecKeyStore">xmlSecKeyStorePtr</link> <link linkend="xmlSecKeysMngrGetKeysStore">xmlSecKeysMngrGetKeysStore</link>
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr);
int         <link linkend="xmlSecKeysMngrAdoptDataStore">xmlSecKeysMngrAdoptDataStore</link>    (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             <link linkend="xmlSecKeyDataStore">xmlSecKeyDataStorePtr</link> store);
<link linkend="xmlSecKeyDataStore">xmlSecKeyDataStorePtr</link> <link linkend="xmlSecKeysMngrGetDataStore">xmlSecKeysMngrGetDataStore</link>
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             <link linkend="xmlSecKeyDataStoreId">xmlSecKeyDataStoreId</link> id);
<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> (<link linkend="xmlSecGetKeyCallback">*xmlSecGetKeyCallback</link>)        (<link linkend="xmlNode">xmlNodePtr</link> keyInfoNode,
                                             <link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> keyInfoCtx);
struct      <link linkend="xmlSecKeysMngr">xmlSecKeysMngr</link>;
<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> <link linkend="xmlSecKeysMngrGetKey">xmlSecKeysMngrGetKey</link>           (<link linkend="xmlNode">xmlNodePtr</link> keyInfoNode,
                                             <link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> keyInfoCtx);
struct      <link linkend="xmlSecKeyStore">xmlSecKeyStore</link>;
<link linkend="xmlSecKeyStore">xmlSecKeyStorePtr</link> <link linkend="xmlSecKeyStoreCreate">xmlSecKeyStoreCreate</link>      (<link linkend="xmlSecKeyStoreId">xmlSecKeyStoreId</link> id);
void        <link linkend="xmlSecKeyStoreDestroy">xmlSecKeyStoreDestroy</link>           (<link linkend="xmlSecKeyStore">xmlSecKeyStorePtr</link> store);
<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> <link linkend="xmlSecKeyStoreFindKey">xmlSecKeyStoreFindKey</link>          (<link linkend="xmlSecKeyStore">xmlSecKeyStorePtr</link> store,
                                             const <link linkend="xmlChar">xmlChar</link> *name,
                                             <link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> keyInfoCtx);
#define     <link linkend="xmlSecKeyStoreGetName">xmlSecKeyStoreGetName</link>           (store)
#define     <link linkend="xmlSecKeyStoreIsValid">xmlSecKeyStoreIsValid</link>           (store)
#define     <link linkend="xmlSecKeyStoreCheckId">xmlSecKeyStoreCheckId</link>           (store, storeId)
#define     <link linkend="xmlSecKeyStoreCheckSize">xmlSecKeyStoreCheckSize</link>         (store, size)
#define     <link linkend="xmlSecKeyStoreIdUnknown">xmlSecKeyStoreIdUnknown</link>
int         (<link linkend="xmlSecKeyStoreInitializeMethod">*xmlSecKeyStoreInitializeMethod</link>)
                                            (<link linkend="xmlSecKeyStore">xmlSecKeyStorePtr</link> store);
void        (<link linkend="xmlSecKeyStoreFinalizeMethod">*xmlSecKeyStoreFinalizeMethod</link>) (<link linkend="xmlSecKeyStore">xmlSecKeyStorePtr</link> store);
<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> (<link linkend="xmlSecKeyStoreFindKeyMethod">*xmlSecKeyStoreFindKeyMethod</link>) (<link linkend="xmlSecKeyStore">xmlSecKeyStorePtr</link> store,
                                             const <link linkend="xmlChar">xmlChar</link> *name,
                                             <link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> keyInfoCtx);
struct      <link linkend="xmlSecKeyStoreKlass">xmlSecKeyStoreKlass</link>;
#define     <link linkend="xmlSecKeyStoreKlassGetName">xmlSecKeyStoreKlassGetName</link>      (klass)
#define     <link linkend="xmlSecSimpleKeysStoreId">xmlSecSimpleKeysStoreId</link>
<link linkend="xmlSecKeyStoreId">xmlSecKeyStoreId</link> <link linkend="xmlSecSimpleKeysStoreGetKlass">xmlSecSimpleKeysStoreGetKlass</link>
                                            (void);
int         <link linkend="xmlSecSimpleKeysStoreAdoptKey">xmlSecSimpleKeysStoreAdoptKey</link>   (<link linkend="xmlSecKeyStore">xmlSecKeyStorePtr</link> store,
                                             <link linkend="xmlSecKey">xmlSecKeyPtr</link> key);
int         <link linkend="xmlSecSimpleKeysStoreLoad">xmlSecSimpleKeysStoreLoad</link>       (<link linkend="xmlSecKeyStore">xmlSecKeyStorePtr</link> store,
                                             const char *uri,
                                             <link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> keysMngr);
int         <link linkend="xmlSecSimpleKeysStoreSave">xmlSecSimpleKeysStoreSave</link>       (<link linkend="xmlSecKeyStore">xmlSecKeyStorePtr</link> store,
                                             const char *filename,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);
</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="xmlSecKeysMngrCreate">xmlSecKeysMngrCreate ()</title>
<programlisting><link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> xmlSecKeysMngrCreate      (void);</programlisting>
<para>
Creates new keys manager. Caller is responsible for freeing it with 
<link linkend="xmlSecKeysMngrDestroy">xmlSecKeysMngrDestroy</link> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the pointer to newly allocated keys manager or NULL if 
an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeysMngrDestroy">xmlSecKeysMngrDestroy ()</title>
<programlisting>void        xmlSecKeysMngrDestroy           (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr);</programlisting>
<para>
Destroys keys manager created with <link linkend="xmlSecKeysMngrCreate">xmlSecKeysMngrCreate</link> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to keys manager.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeysMngrFindKey">xmlSecKeysMngrFindKey ()</title>
<programlisting><link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> xmlSecKeysMngrFindKey          (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const <link linkend="xmlChar">xmlChar</link> *name,
                                             <link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> keyInfoCtx);</programlisting>
<para>
Lookups key in the keys manager keys store. The caller is responsible 
for destroying the returned key using <link linkend="xmlSecKeyDestroy">xmlSecKeyDestroy</link> method.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara>		the desired key name.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyInfoCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> node processing context.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the pointer to a key or NULL if key is not found or an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeysMngrAdoptKeysStore">xmlSecKeysMngrAdoptKeysStore ()</title>
<programlisting>int         xmlSecKeysMngrAdoptKeysStore    (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             <link linkend="xmlSecKeyStore">xmlSecKeyStorePtr</link> store);</programlisting>
<para>
Adopts keys store in the keys manager <parameter>mngr</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>store</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to keys store.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeysMngrGetKeysStore">xmlSecKeysMngrGetKeysStore ()</title>
<programlisting><link linkend="xmlSecKeyStore">xmlSecKeyStorePtr</link> xmlSecKeysMngrGetKeysStore
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr);</programlisting>
<para>
Gets the keys store.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the keys store in the keys manager <parameter>mngr</parameter> or NULL if 
there is no store or an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeysMngrAdoptDataStore">xmlSecKeysMngrAdoptDataStore ()</title>
<programlisting>int         xmlSecKeysMngrAdoptDataStore    (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             <link linkend="xmlSecKeyDataStore">xmlSecKeyDataStorePtr</link> store);</programlisting>
<para>
Adopts data store in the keys manager.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>store</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to data store.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeysMngrGetDataStore">xmlSecKeysMngrGetDataStore ()</title>
<programlisting><link linkend="xmlSecKeyDataStore">xmlSecKeyDataStorePtr</link> xmlSecKeysMngrGetDataStore
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             <link linkend="xmlSecKeyDataStoreId">xmlSecKeyDataStoreId</link> id);</programlisting>
<para>
Lookups the data store of given klass <parameter>id</parameter> in the keys manager.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara>			the desired data store klass.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to data store or NULL if it is not found or an error
occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecGetKeyCallback">xmlSecGetKeyCallback ()</title>
<programlisting><link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> (*xmlSecGetKeyCallback)        (<link linkend="xmlNode">xmlNodePtr</link> keyInfoNode,
                                             <link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> keyInfoCtx);</programlisting>
<para>
Reads the <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> node <parameter>keyInfoNode</parameter> and extracts the key.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keyInfoNode</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> node.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyInfoCtx</parameter>&nbsp;:</term>
<listitem><simpara>			the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> node processing context.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the pointer to key or NULL if the key is not found or 
an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeysMngr">struct xmlSecKeysMngr</title>
<programlisting>struct xmlSecKeysMngr {	
    xmlSecKeyStorePtr		keysStore;	
    xmlSecPtrList		storesList;	
    xmlSecGetKeyCallback	getKey;		
};
</programlisting>
<para>
The keys manager structure.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="xmlSecKeyStore">xmlSecKeyStorePtr</link> <structfield>keysStore</structfield></term>
<listitem><simpara>			the key store (list of keys known to keys manager).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecPtrList">xmlSecPtrList</link> <structfield>storesList</structfield></term>
<listitem><simpara>			the list of key data stores known to keys manager.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecGetKeyCallback">xmlSecGetKeyCallback</link> <structfield>getKey</structfield></term>
<listitem><simpara> 			the callback used to read <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> node.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeysMngrGetKey">xmlSecKeysMngrGetKey ()</title>
<programlisting><link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> xmlSecKeysMngrGetKey           (<link linkend="xmlNode">xmlNodePtr</link> keyInfoNode,
                                             <link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> keyInfoCtx);</programlisting>
<para>
Reads the <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> node <parameter>keyInfoNode</parameter> and extracts the key.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keyInfoNode</parameter>&nbsp;:</term>
<listitem><simpara> 	the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> node.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyInfoCtx</parameter>&nbsp;:</term>
<listitem><simpara> 	the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> node processing context.	
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the pointer to key or NULL if the key is not found or 
an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyStore">struct xmlSecKeyStore</title>
<programlisting>struct xmlSecKeyStore {
    xmlSecKeyStoreId			id;

    /* for the future */
    void*				reserved0;
    void*				reserved1;
};
</programlisting>
<para>
The keys store.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="xmlSecKeyStoreId">xmlSecKeyStoreId</link> <structfield>id</structfield></term>
<listitem><simpara> 		the store id (<link linkend="xmlSecKeyStoreId">xmlSecKeyStoreId</link>).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>void *<structfield>reserved0</structfield></term>
<listitem><simpara>		reserved for the future.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>void *<structfield>reserved1</structfield></term>
<listitem><simpara>		reserved for the future.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyStoreCreate">xmlSecKeyStoreCreate ()</title>
<programlisting><link linkend="xmlSecKeyStore">xmlSecKeyStorePtr</link> xmlSecKeyStoreCreate      (<link linkend="xmlSecKeyStoreId">xmlSecKeyStoreId</link> id);</programlisting>
<para>
Creates new store of the specified klass <parameter>klass</parameter>. Caller is responsible
for freeing the returned store by calling <link linkend="xmlSecKeyStoreDestroy">xmlSecKeyStoreDestroy</link> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara> 		the key store klass.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the pointer to newly allocated keys store or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyStoreDestroy">xmlSecKeyStoreDestroy ()</title>
<programlisting>void        xmlSecKeyStoreDestroy           (<link linkend="xmlSecKeyStore">xmlSecKeyStorePtr</link> store);</programlisting>
<para>
Destroys the store created with <link linkend="xmlSecKeyStoreCreate">xmlSecKeyStoreCreate</link> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>store</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to keys store. 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyStoreFindKey">xmlSecKeyStoreFindKey ()</title>
<programlisting><link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> xmlSecKeyStoreFindKey          (<link linkend="xmlSecKeyStore">xmlSecKeyStorePtr</link> store,
                                             const <link linkend="xmlChar">xmlChar</link> *name,
                                             <link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> keyInfoCtx);</programlisting>
<para>
Lookups key in the store. The caller is responsible for destroying 
the returned key using <link linkend="xmlSecKeyDestroy">xmlSecKeyDestroy</link> method.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>store</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to keys store.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara>		the desired key name.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyInfoCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> node processing context.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the pointer to a key or NULL if key is not found or an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyStoreGetName">xmlSecKeyStoreGetName()</title>
<programlisting>#define     xmlSecKeyStoreGetName(store)</programlisting>
<para>
Macro. Returns key store name.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>store</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to store.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyStoreIsValid">xmlSecKeyStoreIsValid()</title>
<programlisting>#define     xmlSecKeyStoreIsValid(store)</programlisting>
<para>
Macro. Returns 1 if <parameter>store</parameter> is not NULL and <parameter>store</parameter>-&gt;id is not NULL
or 0 otherwise.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>store</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to store.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyStoreCheckId">xmlSecKeyStoreCheckId()</title>
<programlisting>#define     xmlSecKeyStoreCheckId(store, storeId)</programlisting>
<para>
Macro. Returns 1 if <parameter>store</parameter> is valid and <parameter>store</parameter>'s id is equal to <parameter>storeId</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>store</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to store.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>storeId</parameter>&nbsp;:</term>
<listitem><simpara> 		the store Id.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyStoreCheckSize">xmlSecKeyStoreCheckSize()</title>
<programlisting>#define     xmlSecKeyStoreCheckSize(store, size)</programlisting>
<para>
Macro. Returns 1 if <parameter>store</parameter> is valid and <parameter>stores</parameter>'s object has at least <parameter>size</parameter> bytes.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>store</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to store.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara> 		the expected size.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyStoreIdUnknown">xmlSecKeyStoreIdUnknown</title>
<programlisting>#define xmlSecKeyStoreIdUnknown 			((xmlSecKeyDataStoreId)NULL)
</programlisting>
<para>
The "unknown" id.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyStoreInitializeMethod">xmlSecKeyStoreInitializeMethod ()</title>
<programlisting>int         (*xmlSecKeyStoreInitializeMethod)
                                            (<link linkend="xmlSecKeyStore">xmlSecKeyStorePtr</link> store);</programlisting>
<para>
Keys store specific initialization method.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>store</parameter>&nbsp;:</term>
<listitem><simpara> 		the store.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyStoreFinalizeMethod">xmlSecKeyStoreFinalizeMethod ()</title>
<programlisting>void        (*xmlSecKeyStoreFinalizeMethod) (<link linkend="xmlSecKeyStore">xmlSecKeyStorePtr</link> store);</programlisting>
<para>
Keys store specific finalization (destroy) method.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>store</parameter>&nbsp;:</term>
<listitem><simpara> 		the store.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyStoreFindKeyMethod">xmlSecKeyStoreFindKeyMethod ()</title>
<programlisting><link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> (*xmlSecKeyStoreFindKeyMethod) (<link linkend="xmlSecKeyStore">xmlSecKeyStorePtr</link> store,
                                             const <link linkend="xmlChar">xmlChar</link> *name,
                                             <link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtxPtr</link> keyInfoCtx);</programlisting>
<para>
Keys store specific find method. The caller is responsible for destroying 
the returned key using <link linkend="xmlSecKeyDestroy">xmlSecKeyDestroy</link> method.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>store</parameter>&nbsp;:</term>
<listitem><simpara> 		the store.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara>		the desired key name.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyInfoCtx</parameter>&nbsp;:</term>
<listitem><simpara> 	the pointer to key info context.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the pointer to a key or NULL if key is not found or an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyStoreKlass">struct xmlSecKeyStoreKlass</title>
<programlisting>struct xmlSecKeyStoreKlass {
    xmlSecSize				klassSize;
    xmlSecSize				objSize;

    /* data */
    const xmlChar*			name;    
        
    /* constructors/destructor */
    xmlSecKeyStoreInitializeMethod	initialize;
    xmlSecKeyStoreFinalizeMethod	finalize;
    xmlSecKeyStoreFindKeyMethod		findKey;

    /* for the future */
    void*				reserved0;
    void*				reserved1;
};
</programlisting>
<para>
The keys store id (klass).</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="xmlSecSize">xmlSecSize</link> <structfield>klassSize</structfield></term>
<listitem><simpara>		the store klass size.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecSize">xmlSecSize</link> <structfield>objSize</structfield></term>
<listitem><simpara>		the store obj size.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>const <link linkend="xmlChar">xmlChar</link> *<structfield>name</structfield></term>
<listitem><simpara>		the store's name.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecKeyStoreInitializeMethod">xmlSecKeyStoreInitializeMethod</link> <structfield>initialize</structfield></term>
<listitem><simpara>		the store's initialization method.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecKeyStoreFinalizeMethod">xmlSecKeyStoreFinalizeMethod</link> <structfield>finalize</structfield></term>
<listitem><simpara>		the store's finalization (destroy) method.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecKeyStoreFindKeyMethod">xmlSecKeyStoreFindKeyMethod</link> <structfield>findKey</structfield></term>
<listitem><simpara>		the store's find method.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>void *<structfield>reserved0</structfield></term>
<listitem><simpara>		reserved for the future.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>void *<structfield>reserved1</structfield></term>
<listitem><simpara>		reserved for the future.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyStoreKlassGetName">xmlSecKeyStoreKlassGetName()</title>
<programlisting>#define     xmlSecKeyStoreKlassGetName(klass)</programlisting>
<para>
Macro. Returns store klass name.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to store klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecSimpleKeysStoreId">xmlSecSimpleKeysStoreId</title>
<programlisting>#define xmlSecSimpleKeysStoreId		xmlSecSimpleKeysStoreGetKlass()
</programlisting>
<para>
A simple keys store klass id.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecSimpleKeysStoreGetKlass">xmlSecSimpleKeysStoreGetKlass ()</title>
<programlisting><link linkend="xmlSecKeyStoreId">xmlSecKeyStoreId</link> xmlSecSimpleKeysStoreGetKlass
                                            (void);</programlisting>
<para>
The simple list based keys store klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>simple list based keys store klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecSimpleKeysStoreAdoptKey">xmlSecSimpleKeysStoreAdoptKey ()</title>
<programlisting>int         xmlSecSimpleKeysStoreAdoptKey   (<link linkend="xmlSecKeyStore">xmlSecKeyStorePtr</link> store,
                                             <link linkend="xmlSecKey">xmlSecKeyPtr</link> key);</programlisting>
<para>
Adds <parameter>key</parameter> to the <parameter>store</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>store</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to simple keys store.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecSimpleKeysStoreLoad">xmlSecSimpleKeysStoreLoad ()</title>
<programlisting>int         xmlSecSimpleKeysStoreLoad       (<link linkend="xmlSecKeyStore">xmlSecKeyStorePtr</link> store,
                                             const char *uri,
                                             <link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> keysMngr);</programlisting>
<para>
Reads keys from an XML file.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>store</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to simple keys store.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara>		the filename.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keysMngr</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to associated keys manager. 
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecSimpleKeysStoreSave">xmlSecSimpleKeysStoreSave ()</title>
<programlisting>int         xmlSecSimpleKeysStoreSave       (<link linkend="xmlSecKeyStore">xmlSecKeyStorePtr</link> store,
                                             const char *filename,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);</programlisting>
<para>
Writes keys from <parameter>store</parameter> to an XML file.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>store</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to simple keys store.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara>		the filename.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>		the saved keys type (public, private, ...).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
