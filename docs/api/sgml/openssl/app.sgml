<refentry id="xmlsec-openssl-app">
<refmeta>
<refentrytitle>app</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC-OPENSSL Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>app</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



int         <link linkend="xmlSecOpenSSLAppInit">xmlSecOpenSSLAppInit</link>            (const char *config);
int         <link linkend="xmlSecOpenSSLAppShutdown">xmlSecOpenSSLAppShutdown</link>        (void);
int         <link linkend="xmlSecOpenSSLAppDefaultKeysMngrInit">xmlSecOpenSSLAppDefaultKeysMngrInit</link>
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr);
int         <link linkend="xmlSecOpenSSLAppDefaultKeysMngrAdoptKey">xmlSecOpenSSLAppDefaultKeysMngrAdoptKey</link>
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             <link linkend="xmlSecKey">xmlSecKeyPtr</link> key);
int         <link linkend="xmlSecOpenSSLAppDefaultKeysMngrLoad">xmlSecOpenSSLAppDefaultKeysMngrLoad</link>
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const char *uri);
int         <link linkend="xmlSecOpenSSLAppDefaultKeysMngrSave">xmlSecOpenSSLAppDefaultKeysMngrSave</link>
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const char *filename,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);
int         <link linkend="xmlSecOpenSSLAppKeysMngrCertLoad">xmlSecOpenSSLAppKeysMngrCertLoad</link>
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const char *filename,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);
int         <link linkend="xmlSecOpenSSLAppKeysMngrCertLoadMemory">xmlSecOpenSSLAppKeysMngrCertLoadMemory</link>
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);
int         <link linkend="xmlSecOpenSSLAppKeysMngrCertLoadBIO">xmlSecOpenSSLAppKeysMngrCertLoadBIO</link>
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             <link linkend="BIO-CAPS">BIO</link> *bio,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);
int         <link linkend="xmlSecOpenSSLAppKeysMngrAddCertsPath">xmlSecOpenSSLAppKeysMngrAddCertsPath</link>
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const char *path);
<link linkend="xmlSecKey">xmlSecKeyPtr</link> <link linkend="xmlSecOpenSSLAppKeyLoad">xmlSecOpenSSLAppKeyLoad</link>        (const char *filename,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             const char *pwd,
                                             <link linkend="pem-password-cb">pem_password_cb</link> *pwdCallback,
                                             void *pwdCallbackCtx);
<link linkend="xmlSecKey">xmlSecKeyPtr</link> <link linkend="xmlSecOpenSSLAppKeyLoadMemory">xmlSecOpenSSLAppKeyLoadMemory</link>  (const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             const char *pwd,
                                             <link linkend="pem-password-cb">pem_password_cb</link> *pwdCallback,
                                             void *pwdCallbackCtx);
<link linkend="xmlSecKey">xmlSecKeyPtr</link> <link linkend="xmlSecOpenSSLAppKeyLoadBIO">xmlSecOpenSSLAppKeyLoadBIO</link>     (<link linkend="BIO-CAPS">BIO</link> *bio,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             const char *pwd,
                                             <link linkend="pem-password-cb">pem_password_cb</link> *pwdCallback,
                                             void *pwdCallbackCtx);
<link linkend="xmlSecKey">xmlSecKeyPtr</link> <link linkend="xmlSecOpenSSLAppPkcs12Load">xmlSecOpenSSLAppPkcs12Load</link>     (const char *filename,
                                             const char *pwd,
                                             <link linkend="pem-password-cb">pem_password_cb</link> *pwdCallback,
                                             void *pwdCallbackCtx);
<link linkend="xmlSecKey">xmlSecKeyPtr</link> <link linkend="xmlSecOpenSSLAppPkcs12LoadMemory">xmlSecOpenSSLAppPkcs12LoadMemory</link>
                                            (const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                             const char *pwd,
                                             <link linkend="pem-password-cb">pem_password_cb</link> *pwdCallback,
                                             void *pwdCallbackCtx);
<link linkend="xmlSecKey">xmlSecKeyPtr</link> <link linkend="xmlSecOpenSSLAppPkcs12LoadBIO">xmlSecOpenSSLAppPkcs12LoadBIO</link>  (<link linkend="BIO-CAPS">BIO</link> *bio,
                                             const char *pwd,
                                             <link linkend="pem-password-cb">pem_password_cb</link> *pwdCallback,
                                             void *pwdCallbackCtx);
int         <link linkend="xmlSecOpenSSLAppKeyCertLoad">xmlSecOpenSSLAppKeyCertLoad</link>     (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             const char *filename,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format);
int         <link linkend="xmlSecOpenSSLAppKeyCertLoadMemory">xmlSecOpenSSLAppKeyCertLoadMemory</link>
                                            (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format);
int         <link linkend="xmlSecOpenSSLAppKeyCertLoadBIO">xmlSecOpenSSLAppKeyCertLoadBIO</link>  (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             <link linkend="BIO-CAPS">BIO</link> *bio,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format);
void*       <link linkend="xmlSecOpenSSLAppGetDefaultPwdCallback">xmlSecOpenSSLAppGetDefaultPwdCallback</link>
                                            (void);
</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppInit">xmlSecOpenSSLAppInit ()</title>
<programlisting>int         xmlSecOpenSSLAppInit            (const char *config);</programlisting>
<para>
General crypto engine initialization. This function is used
by XMLSec command line utility and called before 
<parameter>xmlSecInit</parameter> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>config</parameter>&nbsp;:</term>
<listitem><simpara>		the path to crypto library configuration (unused).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppShutdown">xmlSecOpenSSLAppShutdown ()</title>
<programlisting>int         xmlSecOpenSSLAppShutdown        (void);</programlisting>
<para>
General crypto engine shutdown. This function is used
by XMLSec command line utility and called after 
<parameter>xmlSecShutdown</parameter> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppDefaultKeysMngrInit">xmlSecOpenSSLAppDefaultKeysMngrInit ()</title>
<programlisting>int         xmlSecOpenSSLAppDefaultKeysMngrInit
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr);</programlisting>
<para>
Initializes <parameter>mngr</parameter> with simple keys store <link linkend="xmlSecSimpleKeysStoreId">xmlSecSimpleKeysStoreId</link>
and a default OpenSSL crypto key data stores.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppDefaultKeysMngrAdoptKey">xmlSecOpenSSLAppDefaultKeysMngrAdoptKey ()</title>
<programlisting>int         xmlSecOpenSSLAppDefaultKeysMngrAdoptKey
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             <link linkend="xmlSecKey">xmlSecKeyPtr</link> key);</programlisting>
<para>
Adds <parameter>key</parameter> to the keys manager <parameter>mngr</parameter> created with <link linkend="xmlSecOpenSSLAppDefaultKeysMngrInit">xmlSecOpenSSLAppDefaultKeysMngrInit</link>
function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppDefaultKeysMngrLoad">xmlSecOpenSSLAppDefaultKeysMngrLoad ()</title>
<programlisting>int         xmlSecOpenSSLAppDefaultKeysMngrLoad
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const char *uri);</programlisting>
<para>
Loads XML keys file from <parameter>uri</parameter> to the keys manager <parameter>mngr</parameter> created 
with <link linkend="xmlSecOpenSSLAppDefaultKeysMngrInit">xmlSecOpenSSLAppDefaultKeysMngrInit</link> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara>		the uri.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppDefaultKeysMngrSave">xmlSecOpenSSLAppDefaultKeysMngrSave ()</title>
<programlisting>int         xmlSecOpenSSLAppDefaultKeysMngrSave
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const char *filename,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);</programlisting>
<para>
Saves keys from <parameter>mngr</parameter> to  XML keys file.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara>		the destination filename.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>		the type of keys to save (public/private/symmetric).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppKeysMngrCertLoad">xmlSecOpenSSLAppKeysMngrCertLoad ()</title>
<programlisting>int         xmlSecOpenSSLAppKeysMngrCertLoad
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const char *filename,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);</programlisting>
<para>
Reads cert from <parameter>filename</parameter> and adds to the list of trusted or known
untrusted certs in <parameter>store</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara> 		the keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara> 		the certificate file.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>		the certificate file format.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> 		the flag that indicates is the certificate in <parameter>filename</parameter>
   			trusted or not.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppKeysMngrCertLoadMemory">xmlSecOpenSSLAppKeysMngrCertLoadMemory ()</title>
<programlisting>int         xmlSecOpenSSLAppKeysMngrCertLoadMemory
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);</programlisting>
<para>
Reads cert from binary buffer <parameter>data</parameter> and adds to the list of trusted or known
untrusted certs in <parameter>store</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara> 		the keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>		the certificate binary data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dataSize</parameter>&nbsp;:</term>
<listitem><simpara>		the certificate binary data size.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>		the certificate file format.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> 		the flag that indicates is the certificate trusted or not.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppKeysMngrCertLoadBIO">xmlSecOpenSSLAppKeysMngrCertLoadBIO ()</title>
<programlisting>int         xmlSecOpenSSLAppKeysMngrCertLoadBIO
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             <link linkend="BIO-CAPS">BIO</link> *bio,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);</programlisting>
<para>
Reads cert from an OpenSSL BIO object and adds to the list of trusted or known
untrusted certs in <parameter>store</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara> 		the keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bio</parameter>&nbsp;:</term>
<listitem><simpara> 		the certificate BIO.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>		the certificate file format.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> 		the flag that indicates is the certificate trusted or not.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppKeysMngrAddCertsPath">xmlSecOpenSSLAppKeysMngrAddCertsPath ()</title>
<programlisting>int         xmlSecOpenSSLAppKeysMngrAddCertsPath
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const char *path);</programlisting>
<para>
Reads cert from <parameter>path</parameter> and adds to the list of trusted certificates.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara> 		the keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara>		the path to trusted certificates.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppKeyLoad">xmlSecOpenSSLAppKeyLoad ()</title>
<programlisting><link linkend="xmlSecKey">xmlSecKeyPtr</link> xmlSecOpenSSLAppKeyLoad        (const char *filename,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             const char *pwd,
                                             <link linkend="pem-password-cb">pem_password_cb</link> *pwdCallback,
                                             void *pwdCallbackCtx);</programlisting>
<para>
Reads key from the a file.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara>		the key filename.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>		the key file format.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwd</parameter>&nbsp;:</term>
<listitem><simpara>		the key file password.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallback</parameter>&nbsp;:</term>
<listitem><simpara>	the key password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallbackCtx</parameter>&nbsp;:</term>
<listitem><simpara>	the user context for password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to the key or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppKeyLoadMemory">xmlSecOpenSSLAppKeyLoadMemory ()</title>
<programlisting><link linkend="xmlSecKey">xmlSecKeyPtr</link> xmlSecOpenSSLAppKeyLoadMemory  (const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             const char *pwd,
                                             <link linkend="pem-password-cb">pem_password_cb</link> *pwdCallback,
                                             void *pwdCallbackCtx);</programlisting>
<para>
Reads key from the memory buffer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>		the binary key data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dataSize</parameter>&nbsp;:</term>
<listitem><simpara>		the size of binary key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>		the key file format.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwd</parameter>&nbsp;:</term>
<listitem><simpara>		the key file password.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallback</parameter>&nbsp;:</term>
<listitem><simpara>	the key password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallbackCtx</parameter>&nbsp;:</term>
<listitem><simpara>	the user context for password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to the key or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppKeyLoadBIO">xmlSecOpenSSLAppKeyLoadBIO ()</title>
<programlisting><link linkend="xmlSecKey">xmlSecKeyPtr</link> xmlSecOpenSSLAppKeyLoadBIO     (<link linkend="BIO-CAPS">BIO</link> *bio,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             const char *pwd,
                                             <link linkend="pem-password-cb">pem_password_cb</link> *pwdCallback,
                                             void *pwdCallbackCtx);</programlisting>
<para>
Reads key from the an OpenSSL BIO object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bio</parameter>&nbsp;:</term>
<listitem><simpara>		the key BIO.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>		the key file format.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwd</parameter>&nbsp;:</term>
<listitem><simpara>		the key file password.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallback</parameter>&nbsp;:</term>
<listitem><simpara>	the key password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallbackCtx</parameter>&nbsp;:</term>
<listitem><simpara>	the user context for password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to the key or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppPkcs12Load">xmlSecOpenSSLAppPkcs12Load ()</title>
<programlisting><link linkend="xmlSecKey">xmlSecKeyPtr</link> xmlSecOpenSSLAppPkcs12Load     (const char *filename,
                                             const char *pwd,
                                             <link linkend="pem-password-cb">pem_password_cb</link> *pwdCallback,
                                             void *pwdCallbackCtx);</programlisting>
<para>
Reads key and all associated certificates from the PKCS12 file.
For uniformity, call xmlSecOpenSSLAppKeyLoad instead of this function. Pass
in format=xmlSecKeyDataFormatPkcs12.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara>		the PKCS12 key filename.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwd</parameter>&nbsp;:</term>
<listitem><simpara>		the PKCS12 file password.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallback</parameter>&nbsp;:</term>
<listitem><simpara>	the password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallbackCtx</parameter>&nbsp;:</term>
<listitem><simpara>	the user context for password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to the key or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppPkcs12LoadMemory">xmlSecOpenSSLAppPkcs12LoadMemory ()</title>
<programlisting><link linkend="xmlSecKey">xmlSecKeyPtr</link> xmlSecOpenSSLAppPkcs12LoadMemory
                                            (const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                             const char *pwd,
                                             <link linkend="pem-password-cb">pem_password_cb</link> *pwdCallback,
                                             void *pwdCallbackCtx);</programlisting>
<para>
Reads key and all associated certificates from the PKCS12 data in memory buffer.
For uniformity, call xmlSecOpenSSLAppKeyLoad instead of this function. Pass
in format=xmlSecKeyDataFormatPkcs12.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>		the PKCS12 binary data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dataSize</parameter>&nbsp;:</term>
<listitem><simpara>		the PKCS12 binary data size.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwd</parameter>&nbsp;:</term>
<listitem><simpara>		the PKCS12 file password.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallback</parameter>&nbsp;:</term>
<listitem><simpara>	the password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallbackCtx</parameter>&nbsp;:</term>
<listitem><simpara>	the user context for password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to the key or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppPkcs12LoadBIO">xmlSecOpenSSLAppPkcs12LoadBIO ()</title>
<programlisting><link linkend="xmlSecKey">xmlSecKeyPtr</link> xmlSecOpenSSLAppPkcs12LoadBIO  (<link linkend="BIO-CAPS">BIO</link> *bio,
                                             const char *pwd,
                                             <link linkend="pem-password-cb">pem_password_cb</link> *pwdCallback,
                                             void *pwdCallbackCtx);</programlisting>
<para>
Reads key and all associated certificates from the PKCS12 data in an OpenSSL BIO object.
For uniformity, call xmlSecOpenSSLAppKeyLoad instead of this function. Pass
in format=xmlSecKeyDataFormatPkcs12.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bio</parameter>&nbsp;:</term>
<listitem><simpara>		the PKCS12 key bio.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwd</parameter>&nbsp;:</term>
<listitem><simpara>		the PKCS12 file password.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallback</parameter>&nbsp;:</term>
<listitem><simpara>	the password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallbackCtx</parameter>&nbsp;:</term>
<listitem><simpara>	the user context for password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to the key or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppKeyCertLoad">xmlSecOpenSSLAppKeyCertLoad ()</title>
<programlisting>int         xmlSecOpenSSLAppKeyCertLoad     (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             const char *filename,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format);</programlisting>
<para>
Reads the certificate from $<parameter>filename</parameter> and adds it to key.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara>		the certificate filename.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>		the certificate file format.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppKeyCertLoadMemory">xmlSecOpenSSLAppKeyCertLoadMemory ()</title>
<programlisting>int         xmlSecOpenSSLAppKeyCertLoadMemory
                                            (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format);</programlisting>
<para>
Reads the certificate from memory buffer and adds it to key.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>		the certificate binary data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dataSize</parameter>&nbsp;:</term>
<listitem><simpara>		the certificate binary data size.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>		the certificate file format.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppKeyCertLoadBIO">xmlSecOpenSSLAppKeyCertLoadBIO ()</title>
<programlisting>int         xmlSecOpenSSLAppKeyCertLoadBIO  (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             <link linkend="BIO-CAPS">BIO</link> *bio,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format);</programlisting>
<para>
Reads the certificate from memory buffer and adds it to key.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bio</parameter>&nbsp;:</term>
<listitem><simpara>		the certificate bio.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>		the certificate file format.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppGetDefaultPwdCallback">xmlSecOpenSSLAppGetDefaultPwdCallback ()</title>
<programlisting>void*       xmlSecOpenSSLAppGetDefaultPwdCallback
                                            (void);</programlisting>
<para>
Gets default password callback.</para>
<para>

</para></refsect2>

</refsect1>




</refentry>
